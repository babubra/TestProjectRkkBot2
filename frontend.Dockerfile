# ==========================================================
# Dockerfile для Frontend-сервиса (Vue + Vite)
# Использование многостадийной сборки для оптимизации
# ==========================================================

# --- ЭТАП 1: "Сборщик" (Builder) ---
# На этом этапе мы собираем наше Vue-приложение в статические файлы.
# Используем образ Node.js (версия 20, 'alpine' - легковесная).
FROM node:20-alpine AS builder

# Объявляем аргумент, который мы ожидаем получить из docker-compose
ARG VITE_YANDEX_MAPS_API_KEY

# Устанавливаем рабочую директорию.
WORKDIR /app

# Копируем package.json и package-lock.json.
# Это важный шаг для кэширования Docker. `npm install` будет запускаться
# только если эти файлы изменятся, а не при каждом изменении кода.
COPY map_frontend/package*.json ./

# Устанавливаем все зависимости проекта.
RUN npm install

# Копируем весь остальной код фронтенда в контейнер.
COPY map_frontend/ /app/

# Устанавливаем полученный аргумент как переменную окружения
# для следующей команды. Vite ее подхватит.
ENV VITE_YANDEX_MAPS_API_KEY=$VITE_YANDEX_MAPS_API_KEY

# Запускаем скрипт сборки из package.json.
# Эта команда создаст папку /app/dist с готовыми файлами.
RUN npm run build


# --- ЭТАП 2: "Сервер" (Production) ---
# На этом этапе мы используем легковесный веб-сервер Nginx
# для раздачи статических файлов, собранных на предыдущем этапе.
FROM nginx:stable-alpine

# Копируем готовые файлы из папки /app/dist этапа "Сборщик"
# в стандартную папку Nginx, откуда он раздает контент.
COPY --from=builder /app/dist /usr/share/nginx/html

# Копируем наш собственный конфигурационный файл для Nginx.
# Этот файл мы создадим на следующем шаге. Он нужен для правильной
# работы роутинга в одностраничных приложениях (SPA).
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Сообщаем Docker, что контейнер будет слушать порт 80.
EXPOSE 80

# Команда для запуска Nginx в "foreground" режиме, что требуется для Docker.
CMD ["nginx", "-g", "daemon off;"]