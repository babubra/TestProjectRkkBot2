import logging
import re
from datetime import date, datetime, timedelta, timezone
from urllib.parse import urljoin

from aiogram.types import Message
from sqlalchemy.ext.asyncio import AsyncSession

from app_bot.config.config import get_env_settings
from app_bot.crm_service.crm_client import CRMClient
from app_bot.database import crud
from app_bot.keyboards.common_keyboards import get_main_menu_kb
from app_bot.keyboards.view_ticket_keyboards import get_deal_action_kb


logger = logging.getLogger(__name__)
settings = get_env_settings()
APP_TIMEZONE = timezone(timedelta(hours=settings.APP_TIMEZONE_OFFSET))


async def get_main_menu_message(message: Message, session: AsyncSession, crm_client: CRMClient):
    """
    –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Ä–∞–±–æ—Ç—ã —Å –∑–∞—è–≤–∫–∞–º–∏.
    –ü–æ–¥–≥—Ä—É–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞—è–≤–æ–∫ –∏ –æ–± –æ–±—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑—è–∞–≤–æ–∫
    """
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ
    loading_message = await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –º–µ–Ω—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    greeting_text = (
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏. "
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –∏ –∑–∞–≤—Ç—Ä–∞—à–Ω—é—é –¥–∞—Ç—É —Å—Ç—Ä–æ–≥–æ –≤ –Ω–∞—à–µ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
    now_local = datetime.now(APP_TIMEZONE)
    today = now_local.date()
    tomorrow = today + timedelta(days=1)

    limit_today = 0
    limit_tomorrow = 0
    count_today = 0
    count_tomorrow = 0

    try:
        limit_today = await crud.get_actual_limit_for_date(session, today)
        limit_tomorrow = await crud.get_actual_limit_for_date(session, tomorrow)

        deals_for_period = await crm_client.get_deals_for_date_range_model(
            start_date=today, end_date=tomorrow
        )

        deals_today = []
        deals_tomorrow = []

        if deals_for_period:
            deals_today = [
                deal
                for deal in deals_for_period
                if deal.visit_datetime and deal.visit_datetime.date() == today
            ]
            deals_tomorrow = [
                deal
                for deal in deals_for_period
                if deal.visit_datetime and deal.visit_datetime.date() == tomorrow
            ]

        count_today = len(deals_today)
        count_tomorrow = len(deals_tomorrow)

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (user: {message.from_user.id}): {e}",
            exc_info=True,
        )
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è –æ—à–∏–±–∫—É
        await loading_message.edit_text(
            "‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞—è–≤–∫–∞—Ö. "
            "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
        )
        return

    kb = get_main_menu_kb(
        tickets_today_count=count_today,
        limit_today=limit_today,
        tickets_tomorrow_count=count_tomorrow,
        limit_tomorrow=limit_tomorrow,
    )

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ, –∑–∞–º–µ–Ω—è—è –µ–≥–æ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await loading_message.edit_text(greeting_text, reply_markup=kb)


def strip_html_and_preserve_breaks(text: str) -> str:
    """
    –£–¥–∞–ª—è–µ—Ç HTML-—Ç–µ–≥–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –æ—Ç <br> –∏ <p>.
    –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç "—Å–ª–∏–ø–∞–Ω–∏–µ" —Ç–µ–∫—Å—Ç–∞.
    """
    if not text:
        return ""

    # 1. –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–≥–∏ <br> –∏ </p> –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
    text = re.sub(r"</p>|<br\s*/?>", "\n", text, flags=re.IGNORECASE)

    # 2. –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ HTML-—Ç–µ–≥–∏
    text = re.sub(r"<[^>]+?>", "", text)

    # 3. –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ (–±–æ–ª–µ–µ –¥–≤—É—Ö –ø–æ–¥—Ä—è–¥)
    text = re.sub(r"\n{3,}", "\n\n", text)

    return text.strip()


DEAL_STATUS_ICONS = {
    "166": "üì¨",  # –í–æ—Ä–æ–Ω–∫–∞ –∑–∞—è–≤–æ–∫
    "152": "üöó",  # –í—ã–µ–∑–¥ –≥–µ–æ–¥–µ–∑–∏—Å—Ç–∞
    "160": "üö´",  # –ü—Ä–∏–º–µ—Ä: –û—Ç–º–µ–Ω–µ–Ω–æ
}
DEFAULT_STATUS_ICON = "üü¢"  # –ò–∫–æ–Ω–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –≤—ã–µ–∑–¥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ


def strip_html_tags(text: str) -> str:
    """
    –£–¥–∞–ª—è–µ—Ç HTML-—Ç–µ–≥–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram.
    """
    if not text:
        return ""
    # –ü—Ä–æ—Å—Ç–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤
    return re.sub("<[^<]+?>", "", text).strip()


async def get_and_format_deals_from_crm(
    crm_client: CRMClient, start_date: date, end_date: date
) -> list[dict]:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–¥–µ–ª–æ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, –≥–¥–µ –∫–∞–∂–¥—ã–π —Å–ª–æ–≤–∞—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç 'text' –∏ 'reply_markup'.
    """
    logger.info(f"–ó–∞–ø—Ä–æ—Å –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–¥–µ–ª–æ–∫ –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {start_date} - {end_date}")

    deals = await crm_client.get_deals_for_date_range_model(
        start_date=start_date, end_date=end_date
    )

    if not deals:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å, —á—Ç–æ–±—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
        return [{"text": "‚úÖ –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", "reply_markup": None}]

    formatted_messages = []
    for deal in deals:
        message_parts = []
        # ... (–≤–µ—Å—å –≤–∞—à –∫–æ–¥ –ø–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é message_parts –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
        # --- 1. –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ —Å—Å—ã–ª–∫–æ–π –∏ –¥–∞—Ç–æ–π ---
        icon = DEAL_STATUS_ICONS.get(deal.state.id, DEFAULT_STATUS_ICON)
        if deal.visit_result and isinstance(deal.visit_result, str):
            stripped_result = deal.visit_result.strip()
            if stripped_result:
                secondary_icon = stripped_result[0]
                icon += secondary_icon

        deal_url = urljoin(crm_client.base_url, f"/deals/{deal.id}/card/")
        link_text = f"{icon} –°–¥–µ–ª–∫–∞ {deal.id}."
        header_link = f'<a href="{deal_url}">{link_text}</a>'

        visit_date_str = ""
        if deal.visit_datetime:
            if deal.visit_datetime.time() == datetime.min.time():
                format_string = "%d.%m.%Y"
            else:
                format_string = "%d.%m.%Y %H:%M"
            visit_date_str = f"<b>{deal.visit_datetime.strftime(format_string)}</b>"

        full_header = f"{header_link} {visit_date_str}".strip()
        message_parts.append(full_header)

        # --- 2. –ù–∞–∑–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ ---
        message_parts.append(f"<b>{deal.name}</b>")

        # --- 3. –û–ø–∏—Å–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ ---
        if deal.description:
            clean_description = strip_html_and_preserve_breaks(deal.description)
            if clean_description:
                message_parts.append(clean_description)

        # --- 4. –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ ---
        if deal.executors:
            executor_names = ", ".join([e.name for e in deal.executors])
            message_parts.append(f"<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:</b> {executor_names}")

        # --- 5. –§–∞–π–ª—ã —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ ---
        if deal.files_for_visit:
            file_links = []
            for file in deal.files_for_visit:
                file_url = urljoin(crm_client.base_url, f"{file.path}")
                file_links.append(f'<a href="{file_url}">{file.name}</a>')

            files_str = "\n".join(file_links)
            message_parts.append(f"<b>–§–∞–π–ª—ã:</b>\n{files_str}")

        final_message = "\n".join(message_parts)

        # --- –°–æ–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å—ë –≤ –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ ---
        keyboard = get_deal_action_kb(deal_id=deal.id)
        formatted_messages.append({"text": final_message, "reply_markup": keyboard})

    return formatted_messages
