import asyncio
import json
import logging
import re
from datetime import date, datetime, timedelta, timezone
from urllib.parse import urljoin

from aiogram.types import Message
from sqlalchemy.ext.asyncio import AsyncSession

from app_bot.config.config import get_env_settings
from app_bot.crm_service.crm_client import CRMClient
from app_bot.database import crud
from app_bot.keyboards.common_keyboards import get_main_menu_kb
from app_bot.keyboards.view_ticket_keyboards import get_deal_action_kb
from app_bot.nspd_service.nspd_client import NspdClient
from app_bot.nspd_service.schemas import CadastralObject


logger = logging.getLogger(__name__)
settings = get_env_settings()
APP_TIMEZONE = timezone(timedelta(hours=settings.APP_TIMEZONE_OFFSET))


async def get_main_menu_message(
    message: Message, session: AsyncSession, crm_client: CRMClient
) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Ä–∞–±–æ—Ç—ã —Å –∑–∞—è–≤–∫–∞–º–∏.
    –ü–æ–¥–≥—Ä—É–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞—è–≤–æ–∫ –∏ –æ–± –æ–±—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑—è–∞–≤–æ–∫
    """
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ
    loading_message = await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –º–µ–Ω—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    greeting_text = (
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏. "
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –∏ –∑–∞–≤—Ç—Ä–∞—à–Ω—é—é –¥–∞—Ç—É —Å—Ç—Ä–æ–≥–æ –≤ –Ω–∞—à–µ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
    now_local = datetime.now(APP_TIMEZONE)
    today = now_local.date()
    tomorrow = today + timedelta(days=1)

    limit_today = 0
    limit_tomorrow = 0
    count_today = 0
    count_tomorrow = 0

    try:
        limit_today = await crud.get_actual_limit_for_date(session, today)
        limit_tomorrow = await crud.get_actual_limit_for_date(session, tomorrow)

        deals_for_period = await crm_client.get_deals_for_date_range_model(
            start_date=today, end_date=tomorrow
        )

        deals_today = []
        deals_tomorrow = []

        if deals_for_period:
            deals_today = [
                deal
                for deal in deals_for_period
                if deal.visit_datetime and deal.visit_datetime.date() == today
            ]
            deals_tomorrow = [
                deal
                for deal in deals_for_period
                if deal.visit_datetime and deal.visit_datetime.date() == tomorrow
            ]

        count_today = len(deals_today)
        count_tomorrow = len(deals_tomorrow)

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (user: {message.from_user.id}): {e}",
            exc_info=True,
        )
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è –æ—à–∏–±–∫—É
        await loading_message.edit_text(
            "‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞—è–≤–∫–∞—Ö. "
            "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
        )
        return

    kb = get_main_menu_kb(
        tickets_today_count=count_today,
        limit_today=limit_today,
        tickets_tomorrow_count=count_tomorrow,
        limit_tomorrow=limit_tomorrow,
    )

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ, –∑–∞–º–µ–Ω—è—è –µ–≥–æ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await loading_message.edit_text(greeting_text, reply_markup=kb)


def strip_html_and_preserve_breaks(text: str) -> str:
    """
    –£–¥–∞–ª—è–µ—Ç HTML-—Ç–µ–≥–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –æ—Ç <br> –∏ <p>.
    –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç "—Å–ª–∏–ø–∞–Ω–∏–µ" —Ç–µ–∫—Å—Ç–∞.
    """
    if not text:
        return ""

    # 1. –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–≥–∏ <br> –∏ </p> –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
    text = re.sub(r"</p>|<br\s*/?>", "\n", text, flags=re.IGNORECASE)

    # 2. –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ HTML-—Ç–µ–≥–∏
    text = re.sub(r"<[^>]+?>", "", text)

    # 3. –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ (–±–æ–ª–µ–µ –¥–≤—É—Ö –ø–æ–¥—Ä—è–¥)
    text = re.sub(r"\n{3,}", "\n\n", text)

    return text.strip()


DEAL_STATUS_ICONS = {
    "166": "üì¨",  # –í–æ—Ä–æ–Ω–∫–∞ –∑–∞—è–≤–æ–∫
    "152": "üöó",  # –í—ã–µ–∑–¥ –≥–µ–æ–¥–µ–∑–∏—Å—Ç–∞
    "160": "üö´",  # –ü—Ä–∏–º–µ—Ä: –û—Ç–º–µ–Ω–µ–Ω–æ
}
DEFAULT_STATUS_ICON = "üîµ"


def strip_html_tags(text: str) -> str:
    """
    –£–¥–∞–ª—è–µ—Ç HTML-—Ç–µ–≥–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram.
    """
    if not text:
        return ""
    # –ü—Ä–æ—Å—Ç–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤
    return re.sub("<[^<]+?>", "", text).strip()


def create_2gis_link(lon: float, lat: float) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –≤–µ–±-—Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ 2–ì–ò–°."""
    return f"https://2gis.ru/geo/{lon},{lat}"


async def get_and_format_deals_from_crm(
    crm_client: CRMClient, start_date: date, end_date: date
) -> list[dict]:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–¥–µ–ª–æ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥.
    –û–±–æ–≥–∞—â–∞–µ—Ç –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ 2–ì–ò–° **—Ç–æ–ª—å–∫–æ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏**.
    """
    logger.info(f"–ó–∞–ø—Ä–æ—Å –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–¥–µ–ª–æ–∫ –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {start_date} - {end_date}")

    deals = await crm_client.get_deals_for_date_range_model(
        start_date=start_date, end_date=end_date
    )

    if not deals:
        return [{"text": "‚úÖ –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", "reply_markup": None}]

    formatted_messages = []
    for deal in deals:
        # 1. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ä—Ç—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ service_data
        coord_map = {}
        if deal.service_data:
            for cad_object in deal.service_data:
                if cad_object.cadastral_number and cad_object.centroid_wgs84:
                    coord_map[cad_object.cadastral_number] = cad_object.centroid_wgs84

        # 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∑–∞–º–µ–Ω—É —Ç–æ–ª—å–∫–æ –∫ –Ω–µ–º—É
        enriched_description = ""
        if deal.description:
            # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç HTML
            clean_description = strip_html_and_preserve_breaks(deal.description)

            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è, –ø—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—É
            if coord_map and clean_description:
                pattern = re.compile("|".join(re.escape(kn) for kn in coord_map.keys()))

                def replacer(match):
                    cadastral_number = match.group(0)
                    coords = coord_map.get(cadastral_number)
                    if coords:
                        link = create_2gis_link(lon=coords[0], lat=coords[1])
                        return f'<a href="{link}">{cadastral_number}</a>'
                    return cadastral_number

                enriched_description = pattern.sub(replacer, clean_description)
            else:
                # –ï—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                enriched_description = clean_description

        # 3. –°–æ–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Å—Ç–µ–π
        message_parts = []

        icon = DEAL_STATUS_ICONS.get(deal.state.id, DEFAULT_STATUS_ICON)
        if deal.visit_result and isinstance(deal.visit_result, str):
            stripped_result = deal.visit_result.strip()
            if stripped_result:
                icon += stripped_result[0]

        deal_url = urljoin(crm_client.base_url, f"/deals/{deal.id}/card/")
        link_text = f"{icon} –°–¥–µ–ª–∫–∞ {deal.id}."
        header_link = f'<a href="{deal_url}">{link_text}</a>'

        visit_date_str = ""
        if deal.visit_datetime:
            fmt = (
                "%d.%m.%Y"
                if deal.visit_datetime.time() == datetime.min.time()
                else "%d.%m.%Y %H:%M"
            )
            visit_date_str = f"<b>{deal.visit_datetime.strftime(fmt)}</b>"

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        message_parts.append(f"{header_link} {visit_date_str}".strip())
        # –î–æ–±–∞–≤–ª—è–µ–º –ù–ê–ó–í–ê–ù–ò–ï –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô
        message_parts.append(f"<b>{deal.name}</b>")
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—à–µ –Ω–æ–≤–æ–µ, –æ–±–æ–≥–∞—â–µ–Ω–Ω–æ–µ –û–ü–ò–°–ê–ù–ò–ï
        if enriched_description:
            message_parts.append(enriched_description)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏
        if deal.executors:
            executor_names = ", ".join([e.name for e in deal.executors])
            message_parts.append(f"<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:</b> {executor_names}")

        if deal.files_for_visit:
            file_links = [
                f'<a href="{urljoin(crm_client.base_url, f.path)}">{f.name}</a>'
                for f in deal.files_for_visit
            ]
            files_str = "\n".join(file_links)
            message_parts.append(f"<b>–§–∞–π–ª—ã:</b>\n{files_str}")

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å—ë –≤–º–µ—Å—Ç–µ
        final_message = "\n\n".join(part for part in message_parts if part)

        # 4. –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        keyboard = get_deal_action_kb(deal_id=deal.id)
        formatted_messages.append({"text": final_message, "reply_markup": keyboard})

    return formatted_messages


async def get_cadastral_data_as_json(description: str, nspd_client: NspdClient) -> str | None:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ –Ω–∏–º –¥–∞–Ω–Ω—ã–µ
    —á–µ—Ä–µ–∑ NspdClient –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ JSON-—Å—Ç—Ä–æ–∫–∏.

    Args:
        description: –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã—Ö –Ω–æ–º–µ—Ä–æ–≤.
        nspd_client: –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ù–°–ü–î.

    Returns:
        JSON-—Å—Ç—Ä–æ–∫–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
    """
    try:
        if not description:
            return None

        # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ (—É—á–∏—Ç—ã–≤–∞—è 1-5 —Ü–∏—Ñ—Ä –≤ –∫–æ–Ω—Ü–µ)
        cadastral_num_pattern = re.compile(r"\b\d{2}:\d{2}:\d{6,7}:\d{1,5}\b")

        found_numbers = cadastral_num_pattern.findall(description)

        all_unique_numbers = list(set(found_numbers))

        if not all_unique_numbers:
            logger.info("–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return None

        logger.info(f"–ù–∞–π–¥–µ–Ω—ã –ö–ù –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {all_unique_numbers}")

        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤—Å–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–∞–º
        tasks = [nspd_client.get_object_info(num) for num in all_unique_numbers]
        results = await asyncio.gather(*tasks, return_exceptions=True)

        successful_results: list[CadastralObject] = []
        for i, res in enumerate(results):
            if isinstance(res, CadastralObject):
                successful_results.append(res)
            elif isinstance(res, Exception):
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ö–ù {all_unique_numbers[i]}: {res}")
            # –ï—Å–ª–∏ res is None, –æ–±—ä–µ–∫—Ç –ø—Ä–æ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω, —ç—Ç–æ –Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ—à–∏–±–∫–æ–π.

        if not successful_results:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É –∏–∑ –ö–ù.")
            return None

        # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON
        data_to_serialize = [obj.model_dump(mode="json") for obj in successful_results]
        json_string = json.dumps(data_to_serialize, ensure_ascii=False)

        logger.info(
            f"–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ {len(successful_results)} –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–º –æ–±—ä–µ–∫—Ç–∞–º."
        )
        return json_string

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ö–ù: {e}", exc_info=True)
        return None
