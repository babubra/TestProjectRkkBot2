import asyncio
import json
import logging
import re
from datetime import date, datetime, timedelta, timezone
from typing import Any
from urllib.parse import urljoin

from aiogram.types import Message
from sqlalchemy.ext.asyncio import AsyncSession

from app_bot.config.config import get_env_settings
from app_bot.crm_service.crm_client import CRMClient
from app_bot.crm_service.schemas import Deal
from app_bot.database import crud
from app_bot.keyboards.common_keyboards import get_main_menu_kb
from app_bot.keyboards.view_ticket_keyboards import get_deal_action_kb
from app_bot.nspd_service.nspd_client import NspdClient
from app_bot.nspd_service.schemas import CadastralObject
from app_bot.schemas import MapDealData, MapLocation


logger = logging.getLogger(__name__)
settings = get_env_settings()
APP_TIMEZONE = timezone(timedelta(hours=settings.APP_TIMEZONE_OFFSET))


async def get_main_menu_message(
    message: Message, session: AsyncSession, crm_client: CRMClient
) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Ä–∞–±–æ—Ç—ã —Å –∑–∞—è–≤–∫–∞–º–∏.
    –ü–æ–¥–≥—Ä—É–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞—è–≤–æ–∫ –∏ –æ–± –æ–±—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑—è–∞–≤–æ–∫
    """
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ
    loading_message = await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –º–µ–Ω—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    greeting_text = (
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏. "
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –∏ –∑–∞–≤—Ç—Ä–∞—à–Ω—é—é –¥–∞—Ç—É —Å—Ç—Ä–æ–≥–æ –≤ –Ω–∞—à–µ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
    now_local = datetime.now(APP_TIMEZONE)
    today = now_local.date()
    tomorrow = today + timedelta(days=1)

    limit_today = 0
    limit_tomorrow = 0
    count_today = 0
    count_tomorrow = 0

    try:
        limit_today = await crud.get_actual_limit_for_date(session, today)
        limit_tomorrow = await crud.get_actual_limit_for_date(session, tomorrow)

        deals_for_period = await crm_client.get_deals_for_date_range_model(
            start_date=today, end_date=tomorrow
        )

        deals_today = []
        deals_tomorrow = []

        if deals_for_period:
            deals_today = [
                deal
                for deal in deals_for_period
                if deal.visit_datetime and deal.visit_datetime.date() == today
            ]
            deals_tomorrow = [
                deal
                for deal in deals_for_period
                if deal.visit_datetime and deal.visit_datetime.date() == tomorrow
            ]

        count_today = len(deals_today)
        count_tomorrow = len(deals_tomorrow)

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (user: {message.from_user.id}): {e}",
            exc_info=True,
        )
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è –æ—à–∏–±–∫—É
        await loading_message.edit_text(
            "‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞—è–≤–∫–∞—Ö. "
            "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
        )
        return

    kb = get_main_menu_kb(
        tickets_today_count=count_today,
        limit_today=limit_today,
        tickets_tomorrow_count=count_tomorrow,
        limit_tomorrow=limit_tomorrow,
    )

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ, –∑–∞–º–µ–Ω—è—è –µ–≥–æ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await loading_message.edit_text(greeting_text, reply_markup=kb)


def strip_html_and_preserve_breaks(text: str) -> str:
    """
    –£–¥–∞–ª—è–µ—Ç HTML-—Ç–µ–≥–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –æ—Ç <br> –∏ <p>.
    –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç "—Å–ª–∏–ø–∞–Ω–∏–µ" —Ç–µ–∫—Å—Ç–∞.
    """
    if not text:
        return ""

    # 1. –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–≥–∏ <br> –∏ </p> –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
    text = re.sub(r"</p>|<br\s*/?>", "\n", text, flags=re.IGNORECASE)

    # 2. –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ HTML-—Ç–µ–≥–∏
    text = re.sub(r"<[^>]+?>", "", text)

    # 3. –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ (–±–æ–ª–µ–µ –¥–≤—É—Ö –ø–æ–¥—Ä—è–¥)
    text = re.sub(r"\n{3,}", "\n\n", text)

    return text.strip()


DEAL_STATUS_ICONS = {
    "166": "üì¨",  # –í–æ—Ä–æ–Ω–∫–∞ –∑–∞—è–≤–æ–∫
    "152": "üöó",  # –í—ã–µ–∑–¥ –≥–µ–æ–¥–µ–∑–∏—Å—Ç–∞
    "160": "üö´",  # –ü—Ä–∏–º–µ—Ä: –û—Ç–º–µ–Ω–µ–Ω–æ
}
DEFAULT_STATUS_ICON = "üîµ"


def strip_html_tags(text: str) -> str:
    """
    –£–¥–∞–ª—è–µ—Ç HTML-—Ç–µ–≥–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram.
    """
    if not text:
        return ""
    # –ü—Ä–æ—Å—Ç–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤
    return re.sub("<[^<]+?>", "", text).strip()


def create_2gis_link(lon: float, lat: float) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –≤–µ–±-—Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ 2–ì–ò–°."""
    return f"https://2gis.ru/geo/{lon},{lat}"


async def _enrich_deal_with_nspd_data(
    deal: Deal, nspd_client: NspdClient
) -> list[CadastralObject]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–¥–µ–ª–∫—É (–≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–∏) –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ö–ù
    –∏ –¥–æ–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏—Ö.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ü–û–õ–ù–´–ô —Å–ø–∏—Å–æ–∫ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (—Å—Ç–∞—Ä—ã–µ + –Ω–æ–≤—ã–µ).
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º `or ""` –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–¥–Ω–æ –∏–∑ –ø–æ–ª–µ–π None
    name_text = deal.name or ""
    description_text = strip_html_and_preserve_breaks(deal.description or "")
    combined_text = f"{name_text}\n{description_text}"

    if not combined_text.strip():
        return deal.service_data or []

    # 1. –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞ –≤ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
    cadastral_num_pattern = re.compile(r"\b\d{2}:\d{2}:\d{6,7}:\d{1,5}\b")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º set –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    required_numbers = set(cadastral_num_pattern.findall(combined_text))

    if not required_numbers:
        return deal.service_data or []

    # 2. –ù–∞—Ö–æ–¥–∏–º –Ω–æ–º–µ—Ä–∞, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —É–∂–µ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    known_objects = deal.service_data or []
    known_numbers = {obj.cadastral_number for obj in known_objects}

    # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å (–æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)
    numbers_to_fetch = list(required_numbers - known_numbers)

    if not numbers_to_fetch:
        return known_objects

    logger.info(f"–î–ª—è —Å–¥–µ–ª–∫–∏ {deal.id} —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –ö–ù: {numbers_to_fetch}")

    # 4. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    tasks = [nspd_client.get_object_info(num) for num in numbers_to_fetch]
    results = await asyncio.gather(*tasks, return_exceptions=True)

    newly_fetched_objects = []
    for res in results:
        if isinstance(res, CadastralObject):
            newly_fetched_objects.append(res)
        elif isinstance(res, Exception):
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç NSPD: {res}")

    # 5. –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    all_objects = known_objects + newly_fetched_objects
    return all_objects


async def prepare_deal_view_data(
    crm_client: CRMClient,
    start_date: date,
    end_date: date,
    nspd_client: NspdClient,
    session: AsyncSession,
    user_telegram_id: int,
) -> dict[str, Any]:
    """
    –ì–æ—Ç–æ–≤–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫: —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç—É.

    1. –ü–æ–ª—É—á–∞–µ—Ç —Å–¥–µ–ª–∫–∏ –∏–∑ CRM.
    2. –û–±–æ–≥–∞—â–∞–µ—Ç –∏—Ö –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ NSPD.
    3. –í –æ–¥–Ω–æ–º —Ü–∏–∫–ª–µ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç:
        - –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram.
        - –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞—Ä—Ç—ã.
    4. –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç—ã, —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤ –ë–î –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.

    Returns:
        –°–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞:
        {
            "messages_to_send": list[dict],
            "map_url": str | None
        }
    """
    logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫ –∑–∞ {start_date} - {end_date}")

    deals = await crm_client.get_deals_for_date_range_model(
        start_date=start_date, end_date=end_date
    )

    if not deals:
        return {
            "messages_to_send": [
                {"text": "‚úÖ –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", "reply_markup": None}
            ],
            "map_url": None,
        }

    messages_to_send = []
    data_for_map = []

    for deal in deals:
        # –õ–æ–≥–∏–∫–∞ –æ–±–æ–≥–∞—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö NSPD –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π
        all_cadastral_objects = await _enrich_deal_with_nspd_data(deal, nspd_client)
        if all_cadastral_objects and all_cadastral_objects != deal.service_data:
            json_data_to_save = json.dumps(
                [obj.model_dump(mode="json") for obj in all_cadastral_objects],
                ensure_ascii=False,
            )
            asyncio.create_task(
                crm_client.update_deal(
                    deal.id, {"Category1000076CustomFieldServiceData": json_data_to_save}
                )
            )
            deal.service_data = all_cadastral_objects

        # --- –ß–∞—Å—Ç—å 1: –ì–æ—Ç–æ–≤–∏–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ) ---
        coord_map = {}
        if all_cadastral_objects:
            for cad_object in all_cadastral_objects:
                if cad_object.cadastral_number and cad_object.centroid_wgs84:
                    coord_map[cad_object.cadastral_number] = cad_object.centroid_wgs84

        enriched_name = deal.name
        enriched_description = ""

        if coord_map:
            pattern = re.compile("|".join(re.escape(kn) for kn in coord_map.keys()))

            def replacer(match):
                cadastral_number = match.group(0)
                coords = coord_map.get(cadastral_number)
                if coords:
                    link = create_2gis_link(lon=coords[0], lat=coords[1])
                    return f'<a href="{link}">{cadastral_number}</a>'
                return cadastral_number

            enriched_name = pattern.sub(replacer, deal.name)
            if deal.description:
                clean_description = strip_html_and_preserve_breaks(deal.description)
                enriched_description = pattern.sub(replacer, clean_description)
        elif deal.description:
            enriched_description = strip_html_and_preserve_breaks(deal.description)

        message_parts = []
        icon = DEAL_STATUS_ICONS.get(deal.state.id, DEFAULT_STATUS_ICON)
        if deal.visit_result and isinstance(deal.visit_result, str):
            stripped_result = deal.visit_result.strip()
            if stripped_result:
                icon += stripped_result[0]
        deal_url = urljoin(crm_client.base_url, f"/deals/{deal.id}/card/")
        link_text = f"{icon} –°–¥–µ–ª–∫–∞ {deal.id}."
        header_link = f'<a href="{deal_url}">{link_text}</a>'
        visit_date_str = ""
        if deal.visit_datetime:
            fmt = (
                "%d.%m.%Y"
                if deal.visit_datetime.time() == datetime.min.time()
                else "%d.%m.%Y %H:%M"
            )
            visit_date_str = f"<b>{deal.visit_datetime.strftime(fmt)}</b>"

        message_parts.append(f"{header_link} {visit_date_str}".strip())
        message_parts.append(f"<b>{enriched_name}</b>")
        if enriched_description:
            message_parts.append(enriched_description)
        if deal.executors:
            message_parts.append(
                f"<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:</b> {', '.join([e.name for e in deal.executors])}"
            )

        final_message = "\n\n".join(part for part in message_parts if part)
        keyboard = get_deal_action_kb(deal_id=deal.id)
        messages_to_send.append({"text": final_message, "reply_markup": keyboard})

        # --- –ß–∞—Å—Ç—å 2: –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç—ã ---
        deal_locations = [
            MapLocation(cadastral_number=obj.cadastral_number, coords=obj.centroid_wgs84)
            for obj in (all_cadastral_objects or [])
            if obj.centroid_wgs84
        ]

        if deal_locations:
            if deal.visit_datetime:
                visit_time_str = (
                    deal.visit_datetime.strftime("%H:%M")
                    if deal.visit_datetime.time() != datetime.min.time()
                    else "–í–µ—Å—å –¥–µ–Ω—å"
                )
            else:
                visit_time_str = "–ë–µ–∑ –≤—Ä–µ–º–µ–Ω–∏"

            data_for_map.append(
                MapDealData(
                    deal_id=deal.id,
                    deal_url=deal_url,
                    deal_name=deal.name,
                    visit_time=visit_time_str,
                    executors=[e.name for e in deal.executors],
                    locations=deal_locations,
                )
            )

    # --- –ß–∞—Å—Ç—å 3: –ü–æ—Å–ª–µ —Ü–∏–∫–ª–∞ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–∞—Ä—Ç—É ---
    map_url = None
    if data_for_map:
        try:
            deals_json_string = json.dumps(
                [deal.model_dump() for deal in data_for_map], ensure_ascii=False
            )
            token = await crud.create_map_request(
                session=session,
                user_telegram_id=user_telegram_id,
                deals_data_json=deals_json_string,
                expires_in_minutes=5,
            )
            map_url = urljoin(settings.FRONTEND_BASE_URL, f"/map/{token}")
            logger.info(
                f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_telegram_id}: {map_url}"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–∞—Ä—Ç—É: {e}", exc_info=True)
            map_url = None  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–æ –Ω–µ –±—É–¥–µ—Ç —Å—Å—ã–ª–∫–∏

    return {"messages_to_send": messages_to_send, "map_url": map_url}


async def get_cadastral_data_as_json(description: str, nspd_client: NspdClient) -> str | None:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ –Ω–∏–º –¥–∞–Ω–Ω—ã–µ
    —á–µ—Ä–µ–∑ NspdClient –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ JSON-—Å—Ç—Ä–æ–∫–∏.

    Args:
        description: –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã—Ö –Ω–æ–º–µ—Ä–æ–≤.
        nspd_client: –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ù–°–ü–î.

    Returns:
        JSON-—Å—Ç—Ä–æ–∫–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
    """
    try:
        if not description:
            return None

        # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ (—É—á–∏—Ç—ã–≤–∞—è 1-5 —Ü–∏—Ñ—Ä –≤ –∫–æ–Ω—Ü–µ)
        cadastral_num_pattern = re.compile(r"\b\d{2}:\d{2}:\d{6,7}:\d{1,5}\b")

        found_numbers = cadastral_num_pattern.findall(description)

        all_unique_numbers = list(set(found_numbers))

        if not all_unique_numbers:
            logger.info("–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return None

        logger.info(f"–ù–∞–π–¥–µ–Ω—ã –ö–ù –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {all_unique_numbers}")

        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤—Å–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–∞–º
        tasks = [nspd_client.get_object_info(num) for num in all_unique_numbers]
        results = await asyncio.gather(*tasks, return_exceptions=True)

        successful_results: list[CadastralObject] = []
        for i, res in enumerate(results):
            if isinstance(res, CadastralObject):
                successful_results.append(res)
            elif isinstance(res, Exception):
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ö–ù {all_unique_numbers[i]}: {res}")
            # –ï—Å–ª–∏ res is None, –æ–±—ä–µ–∫—Ç –ø—Ä–æ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω, —ç—Ç–æ –Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ—à–∏–±–∫–æ–π.

        if not successful_results:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É –∏–∑ –ö–ù.")
            return None

        # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON
        data_to_serialize = [obj.model_dump(mode="json") for obj in successful_results]
        json_string = json.dumps(data_to_serialize, ensure_ascii=False)

        logger.info(
            f"–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ {len(successful_results)} –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–º –æ–±—ä–µ–∫—Ç–∞–º."
        )
        return json_string

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ö–ù: {e}", exc_info=True)
        return None
