import json
import httpx
import asyncio
import logging
from datetime import datetime, timedelta, timezone

import urllib

logger = logging.getLogger(__name__)


class CRMClient:
    def __init__(self, base_url: str, username: str, password: str, program_id: int):
        self.base_url = base_url
        self.username = username
        self.password = password
        self.program_id = program_id

        self._access_token: str | None = None
        self._token_expires_at: datetime | None = None
        self._client_session: httpx.AsyncClient | None = None
        self._lock = (
            asyncio.Lock()
        )  # –î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞

    async def _get_client_session(self) -> httpx.AsyncClient:
        if self._client_session is None or self._client_session.is_closed:
            self._client_session = httpx.AsyncClient(base_url=self.base_url)
        return self._client_session

    async def _login(self) -> bool:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Ö–æ–¥ –≤ CRM, –ø–æ–ª—É—á–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞.
        –≠—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥.
        """
        session = await self._get_client_session()
        # URL –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ base_url
        auth_url_path = "/api/v3/auth/access_token"

        form_data = {
            "username": self.username,
            "password": self.password,
            "grant_type": "password",
        }

        try:
            logger.info(
                f"–ü–æ–ø—ã—Ç–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ CRM –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.username}..."
            )
            response = await session.post(auth_url_path, data=form_data)
            response.raise_for_status()  # –í—ã–±—Ä–æ—Å–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è HTTP-–æ—à–∏–±–æ–∫ 4xx/5xx

            token_data = response.json()
            self._access_token = token_data.get("access_token")

            if not self._access_token:
                logger.error("–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ CRM.")
                self._token_expires_at = None
                return False

            expires_in = token_data.get(
                "expires_in", 3600
            )  # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å –Ω–µ–±–æ–ª—å—à–∏–º –∑–∞–ø–∞—Å–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 60 —Å–µ–∫—É–Ω–¥)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º timezone.utc –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–µ–º
            buffer_seconds = 60
            self._token_expires_at = datetime.now(timezone.utc) + timedelta(
                seconds=expires_in - buffer_seconds
            )
            logger.info(
                f"–£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è. –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: {self._token_expires_at}"
            )
            return True

        except httpx.HTTPStatusError as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e.response.status_code} - {e.response.text}"
            )
            self._access_token = None
            self._token_expires_at = None
            return False
        except httpx.RequestError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
            self._access_token = None
            self._token_expires_at = None
            return False
        except Exception as e:
            logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            self._access_token = None
            self._token_expires_at = None
            return False

    def _is_token_valid(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –ª–∏ —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω."""
        return bool(
            self._access_token
            and self._token_expires_at
            and self._token_expires_at > datetime.now(timezone.utc)
        )

    async def get_access_token(self) -> str | None:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞.
        –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—ã—Ç–∞–µ—Ç—Å—è –µ–≥–æ –æ–±–Ω–æ–≤–∏—Ç—å.
        """
        async with self._lock:  # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –≥–æ–Ω–∫–∏
            if not self._is_token_valid():
                logger.info("–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫. –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
                if not await self._login():
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω.")
                    return None
            return self._access_token

    async def close_session(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é httpx.AsyncClient."""
        if self._client_session and not self._client_session.is_closed:
            await self._client_session.aclose()
            self._client_session = None
            logger.info("–°–µ—Å—Å–∏—è CRMClient –∑–∞–∫—Ä—ã—Ç–∞.")

    async def _request(
        self,
        method: str,
        endpoint: str,
        params: dict | None = None,
        json_data: dict | None = None,
    ) -> dict | None:
        """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API CRM."""
        token = await self.get_access_token()
        if not token:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞.")
            return None

        session = await self._get_client_session()
        headers = {"Authorization": f"Bearer {token}"}

        try:
            logger.debug(
                f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞: {method} {endpoint}, params={params}, json={json_data}"
            )
            response = await session.request(
                method, endpoint, headers=headers, params=params, json=json_data
            )
            response.raise_for_status()
            return response.json()
        except httpx.HTTPStatusError as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {endpoint}: {e.response.status_code} - {e.response.text}"
            )
            if e.response.status_code == 401:
                logger.warning(
                    "–ü–æ–ª—É—á–µ–Ω 401 Unauthorized. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–æ–∫–µ–Ω –æ—Ç–æ–∑–≤–∞–Ω. –ü–æ–ø—ã—Ç–∫–∞ —Å–±—Ä–æ—Å–∏—Ç—å —Ç–æ–∫–µ–Ω."
                )
                async with self._lock:
                    self._access_token = None  # –°–±—Ä–æ—Å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—Ä–æ—Å–µ
            return None
        except httpx.RequestError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {endpoint}: {e}")
            return None
        except Exception as e:
            logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {endpoint}: {e}")
            return None

    async def get_deals(
        self,
        visit_date: datetime | None = None,
        executor_id: str | None = None,
        limit: int = 25,
    ) -> list[dict[str, any]] | None:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫ –∏–∑ –ú–µ–≥–∞–ø–ª–∞–Ω–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
        –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è—Ö.

        Args:
            visit_date (datetime, optional): –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
            executor_id (str, optional): ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
            limit (int, optional): –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö —Å–¥–µ–ª–æ–∫.

        Returns:
            list: –°–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
        """

        # 1. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ (payload) –¥–ª—è –ú–µ–≥–∞–ø–ª–∞–Ω–∞
        deal_payload = {
            "filter": {
                "contentType": "TradeFilter",
                "id": None,
                "program": {
                    "id": self.program_id,
                    "contentType": "Program",
                },
            },
            "limit": limit,
            "onlyRequestedFields": True,
            "sortBy": [
                {
                    "contentType": "SortField",
                    "fieldName": "Category1000076CustomFieldViezdIspolnitel",
                    "desc": False,
                }
            ],
        }

        filter_terms = []

        if visit_date:
            filter_terms.append(
                {
                    "contentType": "FilterTermDate",
                    "field": "Category1000076CustomFieldViezdDataVremyaViezda",
                    "comparison": "equals",
                    "value": {
                        "contentType": "DateOnly",
                        "year": int(visit_date.year),
                        "month": int(
                            visit_date.month - 1
                        ),  # –ú–µ–≥–∞–ø–ª–∞–Ω –æ–∂–∏–¥–∞–µ—Ç –º–µ—Å—è—Ü 0-11
                        "day": int(visit_date.day),
                    },
                }
            )

        if executor_id:
            filter_terms.append(
                {
                    "contentType": "FilterTermRef",
                    "field": "Category1000076CustomFieldViezdIspolnitel",
                    "comparison": "equals",
                    "value": [{"id": executor_id, "contentType": "Employee"}],
                }
            )

        # –ò—Å–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ 202 - üö´ –†–∞–±–æ—Ç–∞ –Ω–∞–¥ –ø—Ä–æ—Ü–µ—Å—Å–æ–º –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∞
        excluded_status_ids = [202]
        filter_terms.append(
            {
                "contentType": "FilterTermRef",
                "field": "state",
                "comparison": "not_equals",
                "value": [
                    {"id": status_id, "contentType": "ProgramState"}
                    for status_id in excluded_status_ids
                ],
            }
        )

        if filter_terms:
            deal_payload["filter"]["config"] = {
                "contentType": "FilterConfig",
                "termGroup": {
                    "contentType": "FilterTermGroup",
                    "join": "and",
                    "terms": filter_terms,
                },
            }

        fields_to_request = [
            "editableFields",
            "possibleActions",
            "Category1000076CustomFieldPredmetRabotAdres",
            "Category1000076CustomFieldPredmetRabotKadastroviyNomer",
            "Category1000076CustomFieldViezdDataVremyaViezda",
            "Category1000076CustomFieldViezdIspolnitel",
            "Category1000076CustomFieldViezdFayliDlyaViezda",
            "Category1000076CustomFieldSluzhebniyTelegramuserid",
            {
                "contractor": [
                    "avatar",
                    "canSeeFull",
                    "firstName",
                    "lastName",
                    "middleName",
                    "name",
                    "type",
                    "contactInfo",
                ]
            },
            "description",
            "isFavorite",
            "name",
            "nearTodo",
            "number",
            "price",
            "program",
            "state",
            "tags",
            "tagsCount",
            "unreadCommentsCount",
        ]
        deal_payload["fields"] = fields_to_request

        # 2. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL —Å –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º JSON –≤ —Å—Ç—Ä–æ–∫–µ –∑–∞–ø—Ä–æ—Å–∞
        try:
            # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –≤ JSON –∏ –∑–∞—Ç–µ–º URL-–∫–æ–¥–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É
            json_payload_str = json.dumps(deal_payload)
            encoded_query_string = urllib.parse.quote(json_payload_str)
        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ payload –¥–ª—è —Å–¥–µ–ª–æ–∫: {e}"
            )
            return None

        endpoint_with_query = f"/api/v3/deal?{encoded_query_string}"

        # 3. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –æ–±–µ—Ä—Ç–∫—É _request
        # –ï—Å–ª–∏ —ç—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å POST –∑–∞–ø—Ä–æ—Å —Å JSON –≤ —Ç–µ–ª–µ:
        response_json = await self._request("GET", endpoint_with_query)

        if not response_json:
            # –û—à–∏–±–∫–∞ —É–∂–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞ –≤ _request
            return None

        if "data" not in response_json or not isinstance(response_json["data"], list):
            logger.error(
                f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API –ú–µ–≥–∞–ø–ª–∞–Ω–∞ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'data' –∏–ª–∏ —ç—Ç–æ –Ω–µ —Å–ø–∏—Å–æ–∫): {response_json}"
            )
            return None

        deals: list[dict[str, any]] = response_json["data"]
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ {len(deals)} —Å–¥–µ–ª–æ–∫ –∏–∑ –ú–µ–≥–∞–ø–ª–∞–Ω–∞.")

        # 4. –õ–æ–≥–∏–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±–æ–≥–∞—â–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è—Ö
        executors_cache: dict[str, dict[str, any]] = {}

        # –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ö–æ–¥: —Å–±–æ—Ä –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è—Ö
        for deal in deals:
            executors_in_deal = deal.get("Category1000076CustomFieldViezdIspolnitel")
            if isinstance(executors_in_deal, list):
                for executor in executors_in_deal:
                    if (
                        isinstance(executor, dict)
                        and "id" in executor
                        and "name" in executor
                    ):
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å 'name'
                        executors_cache[executor["id"]] = executor

        # –í—Ç–æ—Ä–æ–π –ø—Ä–æ—Ö–æ–¥: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è—Ö –≤ —Å–¥–µ–ª–∫–∞—Ö
        for deal in deals:
            executors_in_deal = deal.get("Category1000076CustomFieldViezdIspolnitel")
            if isinstance(executors_in_deal, list):
                updated_executors_list = []
                for executor in executors_in_deal:
                    if (
                        isinstance(executor, dict)
                        and "id" in executor
                        and "name" not in executor
                    ):
                        # –ï—Å–ª–∏ –Ω–µ—Ç 'name', –Ω–æ –µ—Å—Ç—å 'id', –ø—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –∏–∑ –∫–µ—à–∞
                        cached_executor = executors_cache.get(executor["id"])
                        if cached_executor:
                            updated_executors_list.append(cached_executor)
                        else:
                            updated_executors_list.append(
                                executor
                            )  # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –≤ –∫–µ—à–µ –Ω–µ—Ç
                    else:
                        updated_executors_list.append(
                            executor
                        )  # –ï—Å–ª–∏ –µ—Å—Ç—å 'name' –∏–ª–∏ –Ω–µ —Å–ª–æ–≤–∞—Ä—å/–Ω–µ—Ç 'id'
                deal["Category1000076CustomFieldViezdIspolnitel"] = (
                    updated_executors_list
                )

        return deals

    async def create_deal(
        self,
        description: str | None = None,
        manager_id: int | None = None,
        ticket_visit_datetime: datetime | None = None,
        megaplan_user_id: int | None = None,
        name: str | None = None,
        cadastral_to_visit: str | None = None,
        address_to_visit: str | None = None,
    ) -> dict[str, any] | None:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–¥–µ–ª–∫—É –≤ –ú–µ–≥–∞–ø–ª–∞–Ω–µ.

        Args:
            description (str): –û–ø–∏—Å–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏.
            manager_id (int, optional): ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
            ticket_visit_datetime (datetime.datetime, optional): –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤—ã–µ–∑–¥–∞.
            megaplan_user_id (str, optional): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ú–µ–≥–∞–ø–ª–∞–Ω (–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å).
            name (str, optional): –ù–∞–∑–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏.
            cadastral_to_visit (str, optional): –ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –≤—ã–µ–∑–¥–∞.
            address_to_visit (str, optional): –ê–¥—Ä–µ—Å –¥–ª—è –≤—ã–µ–∑–¥–∞.

        Returns:
            Dict[str, Any] | None: –î–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å–¥–µ–ª–∫–∏ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
        """
        logger.info(
            f"–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º: {name if name else '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}"
        )

        deal_payload: dict[str, any] = {
            "contentType": "Deal",
            "program": {"contentType": "Program", "id": self.program_id},
        }

        if description is not None:
            deal_payload["description"] = description

        if name is not None:
            deal_payload["name"] = name

        if manager_id is not None:
            deal_payload["manager"] = {"contentType": "Employee", "id": manager_id}

        if ticket_visit_datetime is not None:
            user_local_timezone = timezone(timedelta(hours=2))
            if (
                ticket_visit_datetime.tzinfo is None
                or ticket_visit_datetime.tzinfo.utcoffset(ticket_visit_datetime) is None
            ):
                # –ù–∞–∏–≤–Ω—ã–π datetime, –¥–µ–ª–∞–µ–º –µ–≥–æ "–æ—Å–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã–º" –¥–ª—è UTC+2
                aware_local_dt = ticket_visit_datetime.replace(
                    tzinfo=user_local_timezone
                )
            else:
                # –£–∂–µ "–æ—Å–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã–π", –ø—Ä–∏–≤–µ–¥–µ–º –µ–≥–æ –∫ –≤–∞—à–µ–º—É UTC+2 –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è –ø–µ—Ä–µ–¥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π –≤ UTC
                aware_local_dt = ticket_visit_datetime.astimezone(user_local_timezone)
            # –®–∞–≥ 2: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC
            utc_dt = aware_local_dt.astimezone(timezone.utc)
            # –®–∞–≥ 3: –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ ISO 8601 (—Ç–µ–ø–µ—Ä—å —Å—Ç—Ä–æ–∫–∞ –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å +00:00 –∏–ª–∏ Z)
            iso_value_for_api = utc_dt.isoformat()
            deal_payload["Category1000076CustomFieldViezdDataVremyaViezda"] = {
                "contentType": "DateTime",
                "value": iso_value_for_api,
            }

        if megaplan_user_id is not None:
            # –ü–æ–ª–µ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —á–∞—Å—Ç–æ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º, –¥–∞–∂–µ –µ—Å–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ–¥–∏–Ω
            deal_payload["Category1000076CustomFieldSluzhebniyTelegramuserid"] = [
                {"contentType": "Employee", "id": str(megaplan_user_id)}
            ]

        if cadastral_to_visit is not None:
            deal_payload["Category1000076CustomFieldPredmetRabotKadastroviyNomer"] = (
                cadastral_to_visit
            )

        if address_to_visit is not None:
            deal_payload["Category1000076CustomFieldPredmetRabotAdres"] = (
                address_to_visit
            )

        # –í—ã–ø–æ–ª–Ω—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
        response_data = await self._request(
            method="POST",
            endpoint="/api/v3/deal",  # –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
            json_data=deal_payload,
        )

        if not response_data:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É: _request –≤–µ—Ä–Ω—É–ª None.")
            return None

        if "data" in response_data and isinstance(response_data["data"], dict):
            created_deal = response_data["data"]
            deal_id = created_deal.get("id")
            deal_number = created_deal.get("number")
            logger.info(f"–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞. ID: {deal_id}, –ù–æ–º–µ—Ä: {deal_number}")
            return created_deal
        else:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API. –û—Ç–≤–µ—Ç: {response_data}"
            )
            return None
