import logging
from datetime import date, datetime, timedelta
from io import BytesIO

from aiogram import Bot, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message
from sqlalchemy.ext.asyncio import AsyncSession

from app_bot.ai_service.perplexity_client import format_ticket_with_perplexity
from app_bot.crm_service.crm_client import CRMClient
from app_bot.database import crud
from app_bot.database.models import Permission
from app_bot.filters.permission_filters import HasPermissionFilter
from app_bot.keyboards.add_ticket_keyboards import (
    AddTicketDateCallback,
    AddTicketTimeCallback,
    get_add_ticket_cancel_kb,
    get_add_ticket_confirmation_kb,
    get_add_ticket_date_kb,
    get_add_ticket_files_kb,
    get_add_ticket_time_kb,
)
from app_bot.utils.ui_utils import get_main_menu_message


add_ticket_router = Router()
logger = logging.getLogger(__name__)


class AddTicketFSM(StatesGroup):
    """FSM –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏."""

    waiting_for_visit_date = State()
    waiting_for_visit_time = State()
    waiting_for_description = State()
    waiting_for_files = State()
    waiting_for_confirmation = State()


@add_ticket_router.callback_query(
    F.data == "add_ticket", HasPermissionFilter(Permission.CREATE_TICKETS)
)
async def start_add_ticket(
    query: CallbackQuery, state: FSMContext, session: AsyncSession, crm_client: CRMClient
):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç FSM –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã.
    """
    await query.answer()
    loading_msg = await query.message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    try:
        today = date.today()
        end_date_for_fetch = today + timedelta(days=4)

        deals_for_period = await crm_client.get_deals_for_date_range_model(
            start_date=today, end_date=end_date_for_fetch
        )
        if deals_for_period is None:
            deals_for_period = []

        # --- –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Å–¥–µ–ª–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ state ---
        # FSM –Ω–µ –º–æ–∂–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å —Å–ª–æ–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã Pydantic, –ø–æ—ç—Ç–æ–º—É –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö –≤ —Å–ª–æ–≤–∞—Ä–∏
        deals_as_dicts = [deal.model_dump(mode="json") for deal in deals_for_period]
        await state.update_data(deals_on_period=deals_as_dicts)

        daily_stats = {}
        for i in range(5):
            current_date = today + timedelta(days=i)
            # –°—á–∏—Ç–∞–µ–º —Å–¥–µ–ª–∫–∏ –ø–æ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
            count = sum(
                1
                for deal_dict in deals_as_dicts
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞—Ç—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π
                if deal_dict.get("visit_datetime")
                and date.fromisoformat(deal_dict["visit_datetime"][:10]) == current_date
            )
            limit = await crud.get_actual_limit_for_date(session, current_date)
            daily_stats[current_date] = (count, limit)

        kb = get_add_ticket_date_kb(daily_stats)
        instruction_text = "üìÖ <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞:"

        await loading_msg.edit_text(text=instruction_text, reply_markup=kb, parse_mode="HTML")
        await state.set_state(AddTicketFSM.waiting_for_visit_date)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}", exc_info=True)
        await loading_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await state.clear()


@add_ticket_router.callback_query(
    AddTicketFSM.waiting_for_visit_date,
    AddTicketDateCallback.filter(F.action == "select_date"),
    HasPermissionFilter(Permission.CREATE_TICKETS),
)
async def process_visit_date(
    query: CallbackQuery,
    callback_data: AddTicketDateCallback,
    state: FSMContext,
    session: AsyncSession,
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç—ã –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è.
    """
    await query.answer()

    loading_msg = await query.message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    target_date = date.fromisoformat(callback_data.date_iso)

    # --- –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ –ª–∏–º–∏—Ç–∞ –Ω–∞ –¥–µ–Ω—å ---
    fsm_data = await state.get_data()
    all_deals_dicts = fsm_data.get("deals_on_period", [])

    deals_on_date_dicts = [
        deal_dict
        for deal_dict in all_deals_dicts
        if deal_dict.get("visit_datetime")
        and date.fromisoformat(deal_dict["visit_datetime"][:10]) == target_date
    ]

    limit = await crud.get_actual_limit_for_date(session, target_date)
    count = len(deals_on_date_dicts)

    if count >= limit:
        await loading_msg.edit_text(
            f"üî¥ <b>–õ–∏–º–∏—Ç –Ω–∞ {target_date.strftime('%d.%m.%Y')} –¥–æ—Å—Ç–∏–≥–Ω—É—Ç ({count}/{limit}).</b>\n"
            "–£—Ç–æ—á–Ω–∏—Ç–µ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —Å–≤–µ—Ä—Ö –ª–∏–º–∏—Ç–∞. "
            "–î–æ–±–∞–≤–ª—è–µ–º–∞—è –∑–∞—è–≤–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ –¥—Ä—É–≥–æ–π —Å—Ä–æ–∫.",
            parse_mode="HTML",
        )
        # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É

    # --- –õ–∏–º–∏—Ç –≤ –ø–æ—Ä—è–¥–∫–µ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É ---
    await state.update_data(visit_date=target_date.isoformat())
    brigades_count = await crud.get_actual_brigades_for_date(session, target_date)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π
    occupied_slots = [
        datetime.fromisoformat(deal_dict["visit_datetime"]).strftime("%H:%M")
        for deal_dict in deals_on_date_dicts
        if deal_dict.get("visit_datetime")
    ]

    kb = get_add_ticket_time_kb(occupied_slots=occupied_slots, brigades_count=brigades_count)
    await loading_msg.answer(
        f"üìÖ –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞: <b>{target_date.strftime('%d.%m.%Y')}</b>\n\n"
        "üïí –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≤—ã–µ–∑–¥–∞:",
        reply_markup=kb,
        parse_mode="HTML",
    )

    await state.set_state(AddTicketFSM.waiting_for_visit_time)


@add_ticket_router.callback_query(
    AddTicketFSM.waiting_for_visit_time,
    AddTicketTimeCallback.filter(F.action == "select_time"),
    HasPermissionFilter(Permission.CREATE_TICKETS),
)
async def process_visit_time(
    query: CallbackQuery,
    callback_data: AddTicketTimeCallback,
    state: FSMContext,
    session: AsyncSession,
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ—Ç –æ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ.
    """
    await query.answer()

    time_from_callback = callback_data.time_str

    warning_message = ""

    if time_from_callback == "any-time":
        visit_time_str = "00:00"
    else:
        # –≠—Ç–æ –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –æ–Ω –æ—Å—Ç–∞–µ—Ç—Å—è
        visit_time_str = time_from_callback.replace("-", ":")

        # –ü—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç—å –¥–µ–ª–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        try:
            data = await state.get_data()
            visit_date_iso = data.get("visit_date")
            visit_date_obj = date.fromisoformat(visit_date_iso)
            all_deals_dicts = data.get("deals_on_period", [])

            deals_on_date_dicts = [
                deal_dict
                for deal_dict in all_deals_dicts
                if deal_dict.get("visit_datetime")
                and date.fromisoformat(deal_dict["visit_datetime"][:10]) == visit_date_obj
            ]

            occupied_slots = [
                datetime.fromisoformat(deal_dict["visit_datetime"]).strftime("%H:%M")
                for deal_dict in deals_on_date_dicts
                if deal_dict.get("visit_datetime")
            ]

            brigades_count = await crud.get_actual_brigades_for_date(session, visit_date_obj)
            occupation_count = occupied_slots.count(visit_time_str)

            if occupation_count >= brigades_count:
                warning_message = (
                    f"\n\nüî¥ <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ù–∞ <b>{visit_time_str}</b> —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–æ "
                    f"<b>{occupation_count}</b> –∏–∑ <b>{brigades_count}</b> –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑–∞—è–≤–æ–∫. "
                    "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –≤—ã–µ–∑–¥–∞."
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ —Å–ª–æ—Ç–∞: {e}", exc_info=True)

    await state.update_data(visit_time=visit_time_str)

    data = await state.get_data()
    visit_date_iso = data.get("visit_date")
    visit_date_obj = date.fromisoformat(visit_date_iso)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º "–õ—é–±–æ–µ" –µ—Å–ª–∏ –±—ã–ª–æ –≤—ã–±—Ä–∞–Ω–æ 00:00, –¥–ª—è –ø–æ–Ω—è—Ç–Ω–æ—Å—Ç–∏
    display_time = "–õ—é–±–æ–µ" if visit_time_str == "00:00" else visit_time_str

    await query.message.edit_text(
        f"üìÖ –î–∞—Ç–∞: <b>{visit_date_obj.strftime('%d.%m.%Y')}</b>\n"
        f"üïí –í—Ä–µ–º—è: <b>{display_time}</b>"
        f"{warning_message}\n\n"
        "‚úçÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏. \n"
        "–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —É–∫–∞–∑–∞—Ç—å –≤–∏–¥ —Ä–∞–±–æ—Ç, –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä, –∞–¥—Ä–µ—Å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã.",
        reply_markup=get_add_ticket_cancel_kb(),
        parse_mode="HTML",
    )

    await state.set_state(AddTicketFSM.waiting_for_description)


@add_ticket_router.callback_query(
    F.data == "add_ticket_no_visit",
    AddTicketFSM.waiting_for_visit_date,
    HasPermissionFilter(Permission.CREATE_TICKETS),
)
async def process_no_visit(query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –≤—ã–µ–∑–¥ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
    –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —à–∞–≥–∏ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏.
    """
    await query.answer()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —á—Ç–æ –¥–∞—Ç–∞/–≤—Ä–µ–º—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    await state.update_data(visit_date=None, visit_time=None)

    await query.message.answer(
        "üñ•Ô∏è <b>–ó–∞—è–≤–∫–∞ –±–µ–∑ –≤—ã–µ–∑–¥–∞.</b>\n\n"
        "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏. \n"
        "–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —É–∫–∞–∑–∞—Ç—å –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä, –∞–¥—Ä–µ—Å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã.",
        reply_markup=get_add_ticket_cancel_kb(),
        parse_mode="HTML",
    )

    await state.set_state(AddTicketFSM.waiting_for_description)


@add_ticket_router.message(
    AddTicketFSM.waiting_for_description,
    F.text,
    HasPermissionFilter(Permission.CREATE_TICKETS),
)
async def process_description(message: Message, state: FSMContext):
    """
    –õ–æ–≤–∏—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª—ã.
    """

    description_text = message.text

    # --- –ó–ê–ì–õ–£–®–ö–ê –¥–ª—è AI-–ª–æ–≥–∏–∫–∏ ---
    # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ AI, –∫–æ—Ç–æ—Ä—ã–π –≤–µ—Ä–Ω–µ—Ç name –∏ description
    # –ê –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∞ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∫–∞–∫ –æ–ø–∏—Å–∞–Ω–∏–µ
    lines = description_text.split("\n")
    deal_name = lines[0].strip()
    if len(deal_name) > 150:  # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è
        deal_name = deal_name[:150] + "..."

    deal_description = description_text
    # --- –ö–û–ù–ï–¶ –ó–ê–ì–õ–£–®–ö–ò ---

    await state.update_data(
        deal_name=deal_name,
        deal_description=deal_description,
        attached_files=[],  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ñ–∞–π–ª–æ–≤
    )

    kb = get_add_ticket_files_kb()
    await message.answer(
        "üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ.</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫ –∑–∞—è–≤–∫–µ —Ñ–∞–π–ª—ã (—Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã).\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –≤ —á–∞—Ç –ø–æ –æ–¥–Ω–æ–º—É –∏–ª–∏ –∞–ª—å–±–æ–º–æ–º.\n\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ <b>¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å¬ª</b>. "
        "–ï—Å–ª–∏ —Ñ–∞–π–ª—ã –Ω–µ –Ω—É–∂–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ <b>¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª</b>.",
        reply_markup=kb,
        parse_mode="HTML",
    )

    await state.set_state(AddTicketFSM.waiting_for_files)


MAX_FILE_SIZE = 25 * 1024 * 1024


@add_ticket_router.message(
    AddTicketFSM.waiting_for_files,
    F.content_type.in_({"photo", "document", "video"}),
    HasPermissionFilter(Permission.CREATE_TICKETS),
)
async def process_file_attachment(message: Message, state: FSMContext):
    """
    –õ–æ–≤–∏—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ñ–∞–π–ª, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ —Ä–∞–∑–º–µ—Ä
    –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ file_id –≤ FSM.
    """
    file_id = None
    file_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª"
    file_size = 0

    if message.photo:
        file_id = message.photo[-1].file_id
        file_name = f"–§–æ—Ç–æ_{file_id[:6]}.jpg"
        file_size = message.photo[-1].file_size
    elif message.document:
        file_id = message.document.file_id
        file_name = message.document.file_name or "–î–æ–∫—É–º–µ–Ω—Ç"
        file_size = message.document.file_size
    elif message.video:
        file_id = message.video.file_id
        file_name = message.video.file_name or f"–í–∏–¥–µ–æ_{file_id[:6]}.mp4"
        file_size = message.video.file_size

    if not file_id:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")
        return

    if file_size and file_size > MAX_FILE_SIZE:
        error_msg = (
            f"‚ùå <b>–§–∞–π–ª ¬´{file_name}¬ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π</b> ({file_size / 1024 / 1024:.2f} –ú–ë).\n"
            "–û–Ω –Ω–µ –±—É–¥–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ –∑–∞—è–≤–∫–µ. –õ–∏–º–∏—Ç Telegram Bot API ‚Äî 25 –ú–ë.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å CRM."
        )
        await message.answer(
            error_msg, reply_markup=get_add_ticket_files_kb(), parse_mode="HTML"
        )
        return  # –í–∞–∂–Ω–æ –ø—Ä–µ—Ä–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å file_id

    data = await state.get_data()
    current_files = data.get("attached_files", [])

    current_files.append({"file_id": file_id, "file_name": file_name})

    await state.update_data(attached_files=current_files)

    await message.answer(
        f"‚úÖ –§–∞–π–ª ¬´{file_name}¬ª –ø—Ä–∏–Ω—è—Ç.\n–ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –∏–ª–∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=get_add_ticket_files_kb(),
    )


@add_ticket_router.callback_query(
    AddTicketFSM.waiting_for_files,
    F.data.in_({"add_ticket_files_done", "add_ticket_skip_files"}),
    HasPermissionFilter(Permission.CREATE_TICKETS),
)
async def process_files_done_or_skip(query: CallbackQuery, state: FSMContext):
    """
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –∏—Ö –ø—Ä–æ–ø—É—Å–∫–∞.
    """
    await query.answer()

    data = await state.get_data()

    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    deal_name = data.get("deal_name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    deal_description = data.get("deal_description", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
    visit_date_iso = data.get("visit_date")
    visit_time = data.get("visit_time")
    attached_files = data.get("attached_files", [])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    summary_parts = [f"üîî <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∑–∞—è–≤–∫–∏:</b>\n"]

    if visit_date_iso and visit_time:
        visit_date = date.fromisoformat(visit_date_iso)
        display_time = "–õ—é–±–æ–µ" if visit_time == "00:00" else visit_time
        summary_parts.append(
            f"<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {visit_date.strftime('%d.%m.%Y')}, {display_time}"
        )
    else:
        summary_parts.append("<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> –ë–µ–∑ –≤—ã–µ–∑–¥–∞")

    summary_parts.append(f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {deal_name}")
    summary_parts.append(f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{deal_description}")

    if attached_files:
        files_list = "\n".join([f" - üìé {f['file_name']}" for f in attached_files])
        summary_parts.append(
            f"\n<b>–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ({len(attached_files)}):</b>\n{files_list}"
        )
    else:
        summary_parts.append("\n<b>–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:</b> –Ω–µ—Ç")

    summary_text = "\n".join(summary_parts)

    kb = get_add_ticket_confirmation_kb()
    await query.message.edit_text(
        summary_text, reply_markup=kb, disable_web_page_preview=True, parse_mode="HTML"
    )

    await state.set_state(AddTicketFSM.waiting_for_confirmation)


@add_ticket_router.callback_query(
    AddTicketFSM.waiting_for_confirmation,
    F.data == "add_ticket_confirm_create",
    HasPermissionFilter(Permission.CREATE_TICKETS),
)
async def process_confirmation(
    query: CallbackQuery,
    state: FSMContext,
    session: AsyncSession,
    crm_client: CRMClient,
    bot: Bot,
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
    1. –°–æ–∑–¥–∞–µ—Ç —Å–¥–µ–ª–∫—É —Å "—Å—ã—Ä—ã–º–∏" –¥–∞–Ω–Ω—ã–º–∏ –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ—Ç —Ñ–∞–π–ª—ã.
    2. –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å–¥–µ–ª–∫—É –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
    3. –í —Ñ–æ–Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –µ–µ —Å –ø–æ–º–æ—â—å—é AI –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    await query.message.edit_text("‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏...")
    await query.answer()

    data = await state.get_data()
    user = await crud.get_user_by_telegram_id(session, query.from_user.id)
    if not user or not user.megaplan_user_id:
        await query.message.answer("‚ùå –û—à–∏–±–∫–∞: –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É CRM.")
        await state.clear()
        return

    deal_id = None
    status_msg = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

    try:
        # --- –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ —Å –°–´–†–´–ú–ò –¥–∞–Ω–Ω—ã–º–∏ ---
        visit_datetime_obj = None
        visit_date_iso = data.get("visit_date")
        visit_time_str = data.get("visit_time")
        if visit_date_iso and visit_time_str:
            visit_date = date.fromisoformat(visit_date_iso)
            hour, minute = map(int, visit_time_str.split(":"))
            visit_datetime_obj = datetime.combine(visit_date, datetime.min.time()).replace(
                hour=hour, minute=minute
            )

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞–∫ –∏–º—è, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∫–∞–∫ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è CRM
        raw_full_description = data.get("deal_description", "")
        lines = raw_full_description.split("\n", 1)
        deal_name_for_crm = lines[0].strip()
        deal_description_for_crm = raw_full_description

        created_deal = await crm_client.create_deal(
            name=deal_name_for_crm,
            description=deal_description_for_crm,
            ticket_visit_datetime=visit_datetime_obj,
            megaplan_user_id=user.megaplan_user_id,
        )

        if not created_deal or "id" not in created_deal:
            raise Exception("CRM –Ω–µ –≤–µ—Ä–Ω—É–ª–æ –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å–¥–µ–ª–∫–µ.")

        deal_id = created_deal["id"]

        # --- –®–∞–≥ 2: –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å) ---
        attached_files = data.get("attached_files", [])
        if attached_files:
            await query.message.edit_text(
                f"‚úÖ –ó–∞—è–≤–∫–∞ #{deal_id} —Å–æ–∑–¥–∞–Ω–∞.\n‚è≥ –ó–∞–≥—Ä—É–∂–∞—é {len(attached_files)} —Ñ–∞–π–ª–æ–≤..."
            )
            crm_file_ids = []
            for file_info in attached_files:
                try:
                    file_io = BytesIO()
                    await bot.download(file_info["file_id"], destination=file_io)
                    file_bytes = file_io.getvalue()

                    uploaded_file = await crm_client.upload_file_from_bytes(
                        file_content=file_bytes, file_name=file_info["file_name"]
                    )
                    if uploaded_file and "id" in uploaded_file:
                        crm_file_ids.append(uploaded_file["id"])
                except Exception as e:
                    logger.error(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª {file_info['file_name']} –¥–ª—è —Å–¥–µ–ª–∫–∏ {deal_id}: {e}"
                    )

            if crm_file_ids:
                await crm_client.attach_files_to_deal_main_attachments(deal_id, crm_file_ids)

        # --- –®–∞–≥ 3: –ü–æ–∫–∞–∑ "—Å—ã—Ä–æ–π" –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –ù–û–í–û–ú –§–û–†–ú–ê–¢–ï ---
        deal_url = f"{crm_client.base_url}deals/{deal_id}/card/"

        # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ –≤–∞—à–µ–º—É –ø—Ä–∏–º–µ—Ä—É
        raw_deal_message_parts = ["‚úÖ <b>–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>"]

        if visit_date_iso and visit_time_str:
            visit_date = date.fromisoformat(visit_date_iso)
            display_time = "–õ—é–±–æ–µ" if visit_time_str == "00:00" else visit_time_str
            raw_deal_message_parts.append(
                f"üöó <b>–í—ã–µ–∑–¥:</b> {visit_date.strftime('%d.%m.%Y')}, {display_time}"
            )
        else:
            raw_deal_message_parts.append("üñ•Ô∏è <b>–ó–∞—è–≤–∫–∞ –±–µ–∑ –≤—ã–µ–∑–¥–∞</b>")

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        raw_deal_message_parts.append(data.get("deal_description", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è."))

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ –∫–æ–Ω—Ü–µ
        raw_deal_message_parts.append(f"\n<a href='{deal_url}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–¥–µ–ª–∫–µ #{deal_id}</a>")

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.edit_text(
            text="\n".join(raw_deal_message_parts),
            disable_web_page_preview=True,
            parse_mode="HTML",
        )

        # --- –®–∞–≥ 4: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏ –∑–∞–ø—É—Å–∫ AI ---
        status_msg = await query.message.answer("‚è≥ –£–ª—É—á—à–∞—é –∑–∞—è–≤–∫—É —Å –ø–æ–º–æ—â—å—é AI...")

        try:
            # –î–ª—è AI –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            raw_description_for_ai = data.get("deal_description", "")
            if raw_description_for_ai:
                formatted_data = await format_ticket_with_perplexity(raw_description_for_ai)

                if formatted_data and isinstance(formatted_data, dict):
                    new_name = formatted_data.get("name")
                    new_description = formatted_data.get("description")

                    if new_name and new_description:
                        update_payload = {"name": new_name, "description": new_description}
                        await crm_client.update_deal(deal_id, update_payload)
                        logger.info(f"–°–¥–µ–ª–∫–∞ {deal_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å –ø–æ–º–æ—â—å—é AI.")
                    else:
                        logger.warning(
                            f"AI –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–¥–µ–ª–∫–∏ {deal_id}. –û—Ç–≤–µ—Ç: {formatted_data}"
                        )
                else:
                    logger.warning(
                        f"AI –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–¥–µ–ª–∫–∏ {deal_id}. –û—Ç–≤–µ—Ç: {formatted_data}"
                    )

        except Exception as e_format:
            logger.error(
                f"–û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ —Ñ–æ–Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ {deal_id}: {e_format}",
                exc_info=True,
            )

    except Exception as e_main:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏: {e_main}", exc_info=True)
        deal_id_str = f" (ID —Å–¥–µ–ª–∫–∏: {deal_id})" if deal_id else ""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏
        if query.message.text != "‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏...":
            await query.message.answer(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏{deal_id_str}. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
        else:
            await query.message.edit_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏{deal_id_str}. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )

    finally:
        # --- –®–∞–≥ 5: –û—á–∏—Å—Ç–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é ---
        if status_msg:
            await status_msg.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–£–ª—É—á—à–∞—é –∑–∞—è–≤–∫—É..."

        await state.clear()
        # –í—ã–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–¥–µ–ª–∫–æ–π
        await get_main_menu_message(query.message, session, crm_client)


@add_ticket_router.callback_query(F.data == "add_ticket_cancel")
async def cancel_add_ticket_date_step(
    query: CallbackQuery, state: FSMContext, session: AsyncSession, crm_client: CRMClient
):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await state.clear()
    await query.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –º—ã –≤ –º–µ–Ω—é
    await get_main_menu_message(query.message, session, crm_client)
