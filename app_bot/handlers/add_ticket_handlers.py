import logging
from datetime import date, datetime, timedelta

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession

from app_bot.crm_service.crm_client import CRMClient
from app_bot.crm_service.schemas import Deal
from app_bot.database import crud
from app_bot.database.models import Permission
from app_bot.filters.permission_filters import HasPermissionFilter
from app_bot.keyboards.add_ticket_keyboards import (
    AddTicketDateCallback,
    AddTicketTimeCallback,
    get_add_ticket_date_kb,
    get_add_ticket_time_kb,
)
from app_bot.utils.ui_utils import get_main_menu_message


add_ticket_router = Router()
logger = logging.getLogger(__name__)


class AddTicketFSM(StatesGroup):
    """FSM –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏."""

    waiting_for_visit_date = State()
    waiting_for_visit_time = State()
    waiting_for_description = State()
    # waiting_for_files = State()
    # waiting_for_confirmation = State()


@add_ticket_router.callback_query(
    F.data == "add_ticket", HasPermissionFilter(Permission.CREATE_TICKETS)
)
async def start_add_ticket(
    query: CallbackQuery, state: FSMContext, session: AsyncSession, crm_client: CRMClient
):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç FSM –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã.
    """
    await query.answer()
    loading_msg = await query.message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    try:
        today = date.today()
        end_date_for_fetch = today + timedelta(days=4)

        deals_for_period = await crm_client.get_deals_for_date_range_model(
            start_date=today, end_date=end_date_for_fetch
        )
        if deals_for_period is None:
            deals_for_period = []

        # --- –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Å–¥–µ–ª–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ state ---
        # FSM –Ω–µ –º–æ–∂–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å —Å–ª–æ–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã Pydantic, –ø–æ—ç—Ç–æ–º—É –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö –≤ —Å–ª–æ–≤–∞—Ä–∏
        deals_as_dicts = [deal.model_dump(mode="json") for deal in deals_for_period]
        await state.update_data(deals_on_period=deals_as_dicts)

        daily_stats = {}
        for i in range(5):
            current_date = today + timedelta(days=i)
            # –°—á–∏—Ç–∞–µ–º —Å–¥–µ–ª–∫–∏ –ø–æ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
            count = sum(
                1
                for deal_dict in deals_as_dicts
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞—Ç—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π
                if deal_dict.get("visit_datetime")
                and date.fromisoformat(deal_dict["visit_datetime"][:10]) == current_date
            )
            limit = await crud.get_actual_limit_for_date(session, current_date)
            daily_stats[current_date] = (count, limit)

        kb = get_add_ticket_date_kb(daily_stats)
        instruction_text = "üìÖ **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞:"

        await loading_msg.edit_text(text=instruction_text, reply_markup=kb)
        await state.set_state(AddTicketFSM.waiting_for_visit_date)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}", exc_info=True)
        await loading_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await state.clear()


@add_ticket_router.callback_query(
    AddTicketFSM.waiting_for_visit_date,
    AddTicketDateCallback.filter(F.action == "select_date"),
    HasPermissionFilter(Permission.CREATE_TICKETS),
)
async def process_visit_date(
    query: CallbackQuery,
    callback_data: AddTicketDateCallback,
    state: FSMContext,
    session: AsyncSession,
    crm_client: CRMClient,
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç—ã –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è.
    """
    await query.answer()
    loading_msg = await query.message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    target_date = date.fromisoformat(callback_data.date_iso)

    # --- –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ –ª–∏–º–∏—Ç–∞ –Ω–∞ –¥–µ–Ω—å ---
    fsm_data = await state.get_data()
    all_deals_dicts = fsm_data.get("deals_on_period", [])

    deals_on_date_dicts = [
        deal_dict
        for deal_dict in all_deals_dicts
        if deal_dict.get("visit_datetime")
        and date.fromisoformat(deal_dict["visit_datetime"][:10]) == target_date
    ]

    limit = await crud.get_actual_limit_for_date(session, target_date)
    count = len(deals_on_date_dicts)

    if count >= limit:
        await loading_msg.edit_text(
            f"üî¥ **–õ–∏–º–∏—Ç –Ω–∞ {target_date.strftime('%d.%m.%Y')} –¥–æ—Å—Ç–∏–≥–Ω—É—Ç ({count}/{limit}).**\n"
            "–£—Ç–æ—á–Ω–∏—Ç–µ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —Å–≤–µ—Ä—Ö –ª–∏–º–∏—Ç–∞. "
            "–î–æ–±–∞–≤–ª—è–µ–º–∞—è –∑–∞—è–≤–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ –¥—Ä—É–≥–æ–π —Å—Ä–æ–∫."
        )
        # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É

    # --- –õ–∏–º–∏—Ç –≤ –ø–æ—Ä—è–¥–∫–µ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É ---
    await state.update_data(visit_date=target_date.isoformat())
    brigades_count = await crud.get_actual_brigades_for_date(session, target_date)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π
    occupied_slots = [
        datetime.fromisoformat(deal_dict["visit_datetime"]).strftime("%H:%M")
        for deal_dict in deals_on_date_dicts
        if deal_dict.get("visit_datetime")
    ]

    kb = get_add_ticket_time_kb(occupied_slots=occupied_slots, brigades_count=brigades_count)
    await loading_msg.edit_text(
        f"üìÖ –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞: <b>{target_date.strftime('%d.%m.%Y')}</b>\n\n"
        "üïí –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≤—ã–µ–∑–¥–∞:",
        reply_markup=kb,
    )

    await state.set_state(AddTicketFSM.waiting_for_visit_time)


@add_ticket_router.callback_query(
    AddTicketFSM.waiting_for_visit_time,
    AddTicketTimeCallback.filter(F.action == "select_time"),
    HasPermissionFilter(Permission.CREATE_TICKETS),
)
async def process_visit_time(
    query: CallbackQuery,
    callback_data: AddTicketTimeCallback,
    state: FSMContext,
    session: AsyncSession,
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏.
    """
    await query.answer()
    # –ü–æ–ª—É—á–∞–µ–º "08-00" –∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–º–µ–Ω—è–µ–º "-" –Ω–∞ ":"
    time_from_callback = callback_data.time_str
    visit_time_str = time_from_callback.replace("-", ":")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state —É–∂–µ –∫—Ä–∞—Å–∏–≤–æ–µ –≤—Ä–µ–º—è "08:00"
    await state.update_data(visit_time=visit_time_str)

    # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –¥–∞—Ç—É –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    data = await state.get_data()
    visit_date_iso = data.get("visit_date")
    visit_date_obj = date.fromisoformat(visit_date_iso)

    warning_message = ""
    try:
        all_deals_dicts = data.get("deals_on_period", [])

        deals_on_date_dicts = [
            deal_dict
            for deal_dict in all_deals_dicts
            if deal_dict.get("visit_datetime")
            and date.fromisoformat(deal_dict["visit_datetime"][:10]) == visit_date_obj
        ]

        occupied_slots = [
            datetime.fromisoformat(deal_dict["visit_datetime"]).strftime("%H:%M")
            for deal_dict in deals_on_date_dicts
            if deal_dict.get("visit_datetime")
        ]

        brigades_count = await crud.get_actual_brigades_for_date(session, visit_date_obj)
        occupation_count = occupied_slots.count(visit_time_str)

        if occupation_count >= brigades_count:
            warning_message = (
                f"\n\nüî¥ <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ù–∞ <b>{visit_time_str}</b> —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–æ "
                f"<b>{occupation_count}</b> –∏–∑ <b>{brigades_count}</b> –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑–∞—è–≤–æ–∫. "
                "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –≤—ã–µ–∑–¥–∞."
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ —Å–ª–æ—Ç–∞: {e}", exc_info=True)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤–≤–æ–¥—É –æ–ø–∏—Å–∞–Ω–∏—è
    # –ú—ã –¥–æ–±–∞–≤–ª—è–µ–º `warning_message` –≤ –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç.
    # –ï—Å–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–∏—Ç—Å—è. –ï—Å–ª–∏ –Ω–µ –ø—É—Å—Ç–æ–π - –æ–Ω –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è.
    await query.message.edit_text(
        f"üìÖ –î–∞—Ç–∞: <b>{visit_date_obj.strftime('%d.%m.%Y')}</b>\n"
        f"üïí –í—Ä–µ–º—è: <b>{visit_time_str}</b>"
        f"{warning_message}\n\n"
        "‚úçÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏. \n"
        "–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —É–∫–∞–∑–∞—Ç—å –≤–∏–¥ —Ä–∞–±–æ—Ç, –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä, –∞–¥—Ä–µ—Å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã."
    )

    await state.set_state(AddTicketFSM.waiting_for_description)


@add_ticket_router.callback_query(
    F.data == "add_ticket_no_visit",
    AddTicketFSM.waiting_for_visit_date,
    HasPermissionFilter(Permission.CREATE_TICKETS),
)
async def process_no_visit(query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –≤—ã–µ–∑–¥ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
    –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —à–∞–≥–∏ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏.
    """
    await query.answer()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —á—Ç–æ –¥–∞—Ç–∞/–≤—Ä–µ–º—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    await state.update_data(visit_date=None, visit_time=None)

    # –ó–ê–ì–õ–£–®–ö–ê: –ø–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –æ–ø–∏—Å–∞–Ω–∏—é
    await query.message.edit_text(
        "üñ•Ô∏è **–ó–∞—è–≤–∫–∞ –±–µ–∑ –≤—ã–µ–∑–¥–∞.**\n\n"
        "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏. \n"
        "–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —É–∫–∞–∑–∞—Ç—å –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä, –∞–¥—Ä–µ—Å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã."
    )

    await state.set_state(
        AddTicketFSM.waiting_for_description
    )  # <-- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ


@add_ticket_router.callback_query(F.data == "add_ticket_cancel")
async def cancel_add_ticket_date_step(
    query: CallbackQuery, state: FSMContext, session: AsyncSession, crm_client: CRMClient
):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await state.clear()
    await query.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await get_main_menu_message(query.message, session, crm_client)
