import logging
from datetime import date, datetime, timedelta

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message
from sqlalchemy.exc import IntegrityError
from sqlalchemy.ext.asyncio import AsyncSession

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ–ª–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
from app_bot.config.user_roles_config import (
    ADMIN_ROLE_PERMISSIONS,
    MANAGER_ROLE_PERMISSIONS,
    USER_ROLE_PERMISSIONS,
)
from app_bot.database import crud
from app_bot.database.models import Permission
from app_bot.filters.permission_filters import HasPermissionFilter
from app_bot.keyboards.admin_keyboards import (
    UserCallback,
    get_cancel_kb,
    get_limits_management_kb,
    get_user_management_kb,
)


admin_router = Router()
logger = logging.getLogger(__name__)


class CreateUserFSM(StatesGroup):
    """
    –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """

    waiting_for_user_data = State()


class SetDefaultLimitFSM(StatesGroup):
    """
    –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–≥–æ –ª–∏–º–∏—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    """

    waiting_for_new_limit = State()


class SetDateLimitFSM(StatesGroup):
    """
    –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∏–º–∏—Ç–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã.
    """

    waiting_for_date_range = State()
    waiting_for_limit_value = State()


class ViewDateLimitFSM(StatesGroup):
    """
    –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã.
    """

    waiting_for_date_range_to_view = State()


ROLES_MAP = {
    "USER_ROLE_PERMISSIONS": USER_ROLE_PERMISSIONS,
    "MANAGER_ROLE_PERMISSIONS": MANAGER_ROLE_PERMISSIONS,
    "ADMIN_ROLE_PERMISSIONS": ADMIN_ROLE_PERMISSIONS,
}


async def get_admin_menu_message(event: Message | CallbackQuery) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω-–º–µ–Ω—é.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ª–∏–±–æ Message, –ª–∏–±–æ CallbackQuery.

    ‚Ä¢ –î–ª—è Message ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
    ‚Ä¢ –î–ª—è CallbackQuery ‚Äî —Å–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º ¬´–∫—Ä—É—Ç–∏–ª–∫—É¬ª –º–µ—Ç–æ–¥–æ–º
    `CallbackQuery.answer()` (0-200 —Å–∏–º–≤.[8]), –∑–∞—Ç–µ–º
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –ø—Ä–∏ –ø–æ–º–æ—â–∏ `event.message.answer(...)`.
    """
    instruction_text = (
        "üîß –†–ï–ñ–ò–ú –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê üîß\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
        "üë§ /create_user ‚Äì –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "üìã /users_list ‚Äì –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        "üìä /ticket_limits ‚Äì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞–º–∏ –∑–∞—è–≤–æ–∫\n\n"
        "üè† /start ‚Äì –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    )

    if isinstance(event, Message):
        await event.answer(text=instruction_text)
    elif isinstance(event, CallbackQuery):
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º progress-bar; —Ç–µ–∫—Å—Ç ‚â§200 —Å–∏–º–≤.[8]
        await event.answer()
        await event.message.answer(text=instruction_text)
    else:
        raise TypeError("–ê—Ä–≥—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Message –∏–ª–∏ CallbackQuery")


async def get_ticket_limit_menu_message(
    event: Message | CallbackQuery, session: AsyncSession
) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞–º–∏ –∑–∞—è–≤–æ–∫.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–∏–º–∏—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏ –ø—Ä–æ–≥–Ω–æ–∑ –ª–∏–º–∏—Ç–æ–≤ –Ω–∞ 7 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥,
    –≤—ã–¥–µ–ª—è—è –¥–Ω–∏ —Å –æ—Å–æ–±—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.
    """
    # 1. –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    app_settings = await crud.get_app_settings(session)
    default_limit = app_settings.default_daily_limit

    # 2. –ì–æ—Ç–æ–≤–∏–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 7 –¥–Ω–µ–π
    today = date.today()
    day_names_ru = ("–ø–Ω", "–≤—Ç", "—Å—Ä", "—á—Ç", "–ø—Ç", "—Å–±", "–≤—Å")
    weekly_limits_info = []

    for i in range(7):
        current_date = today + timedelta(days=i)
        actual_limit = await crud.get_actual_limit_for_date(session, current_date)

        day_name = day_names_ru[current_date.weekday()]
        date_str = current_date.strftime("%d.%m")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ª–∏–º–∏—Ç –æ—Å–æ–±—ã–º (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º)
        override_marker = " ‚ú®" if actual_limit != default_limit else ""

        limit_info_str = f"{day_name}, {date_str}: <b>{actual_limit}</b>{override_marker}"
        weekly_limits_info.append(limit_info_str)

    # 3. –°–æ–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    weekly_limits_formatted = "\n".join(weekly_limits_info)

    instruction_text = (
        "üìã <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞–º–∏ –∑–∞—è–≤–æ–∫</b> üìã\n\n"
        f"–õ–∏–º–∏—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: <b>{default_limit}</b>\n\n"
        "<u>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π:</u>\n"
        f"{weekly_limits_formatted}\n\n"
        "<i>‚ú® - –Ω–∞ –¥–∞—Ç—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ—Å–æ–±—ã–π –ª–∏–º–∏—Ç.</i>"
    )

    kb = get_limits_management_kb(default_limit=default_limit)

    # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if isinstance(event, Message):
        await event.answer(text=instruction_text, reply_markup=kb)
    elif isinstance(event, CallbackQuery):
        await event.answer()
        try:
            await event.message.answer(text=instruction_text, reply_markup=kb)
        except Exception:
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è), –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await event.message.answer(text=instruction_text, reply_markup=kb)
    else:
        raise TypeError("–ê—Ä–≥—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Message –∏–ª–∏ CallbackQuery")


@admin_router.callback_query(
    F.data == "admin_cancel",
    HasPermissionFilter([Permission.MANAGE_USERS, Permission.SET_TRIP_LIMITS]),
)
async def cancel_cmd(query: CallbackQuery, state: FSMContext):
    await state.clear()
    await get_admin_menu_message(query)


@admin_router.message(
    Command("admin"), HasPermissionFilter([Permission.MANAGE_USERS, Permission.SET_TRIP_LIMITS])
)
async def admin_cmd(message: Message, state: FSMContext):
    await state.clear()
    await get_admin_menu_message(message)


@admin_router.message(Command("create_user"), HasPermissionFilter(Permission.MANAGE_USERS))
async def start_user_creation_cmd(message: Message, state: FSMContext):
    """
    –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –û–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –≤–≤–æ–¥—É –¥–∞–Ω–Ω—ã—Ö.
    """

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    instruction_text = """
        üìù **–°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø** üìù

        –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –ö–∞–∂–¥—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:

        üÜî <b>Telegram ID</b>
        ‚îî‚îÄ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram

        üè¢ <b>Megaplan ID</b>
        ‚îî‚îÄ ID –≤ —Å–∏—Å—Ç–µ–º–µ Megaplan

        üë§ <b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>
        ‚îî‚îÄ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        üîê <b>–ì—Ä—É–ø–ø–∞ –ø—Ä–∞–≤</b>
        ‚îî‚îÄ –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ä–æ–ª–µ–π:
            ‚Ä¢ USER_ROLE_PERMISSIONS (—Å–æ–∑–¥–∞–Ω–∏–µ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫)
            ‚Ä¢ MANAGER_ROLE_PERMISSIONS (+ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞–º–∏ –∑–∞—è–≤–æ–∫)
            ‚Ä¢ ADMIN_ROLE_PERMISSIONS (+ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏)

        –ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞:
        123456789
        133546456
        –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤
        USER_ROLE_PERMISSIONS
        """
    await message.answer(text=instruction_text, reply_markup=get_cancel_kb())

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await state.set_state(CreateUserFSM.waiting_for_user_data)


@admin_router.message(
    CreateUserFSM.waiting_for_user_data, F.text, HasPermissionFilter(Permission.MANAGE_USERS)
)
async def process_and_save_user_data_cmd(
    message: Message, state: FSMContext, session: AsyncSession
):
    """
    –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Ö
    –∏ —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î. –ö–∞–∂–¥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–µ—Ä–Ω—É—Ç–∞ –≤ —Å–≤–æ–π –±–ª–æ–∫ try-except.
    """
    # --- 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤–≤–æ–¥–∞ ---
    try:
        lines = message.text.strip().split("\n")
        if len(lines) != 4:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫. –û–∂–∏–¥–∞–ª–æ—Å—å 4.")
        tg_id_str, mp_id_str, username, role_str = [line.strip() for line in lines]
    except (ValueError, IndexError):
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–≤–æ–¥–∞!</b>\n\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ —Ä–æ–≤–Ω–æ 4 —Å—Ç—Ä–æ–∫–∏, –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return

    # --- 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram ID ---
    try:
        telegram_id = int(tg_id_str)
    except ValueError:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π Telegram ID!</b>\n\n"
            f"–ó–Ω–∞—á–µ–Ω–∏–µ '<code>{tg_id_str}</code>' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º. "
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID."
        )
        return

    # --- 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ Megaplan ID ---
    try:
        megaplan_user_id = int(mp_id_str)
    except ValueError:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π Megaplan ID!</b>\n\n"
            f"–ó–Ω–∞—á–µ–Ω–∏–µ '<code>{mp_id_str}</code>' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º. "
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID."
        )
        return

    # --- 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    if not username:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</b>\n\n"
            "–ü–æ–ª–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è."
        )
        return

    # --- 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ ---
    try:
        permissions = ROLES_MAP[role_str]
    except KeyError:
        valid_roles_html = "\n".join([f"‚Ä¢ <code>{role}</code>" for role in ROLES_MAP.keys()])
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å!</b>\n\n"
            f"–£–∫–∞–∑–∞–Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ä–æ–ª—å '<code>{role_str}</code>'.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π:\n{valid_roles_html}"
        )
        return

    # --- 6. –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î ---
    try:
        new_user = await crud.create_user(
            session=session,
            telegram_id=telegram_id,
            username=username,
            megaplan_user_id=megaplan_user_id,
            initial_permissions=permissions,
        )

        success_text = f"""
            ‚úÖ <b>–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù</b> ‚úÖ

            –ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

            üÜî <b>Telegram ID:</b> <code>{new_user.telegram_id}</code>
            üè¢ <b>Megaplan ID:</b> <code>{new_user.megaplan_user_id}</code>
            üë§ <b>–ò–º—è:</b> {new_user.username}
            üîê <b>–†–æ–ª—å:</b> <code>{role_str}</code>
        """

        await message.answer(success_text)
        await get_admin_menu_message(message)

    except IntegrityError:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!</b>\n\n"
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º <b>Telegram ID</b> –∏–ª–∏ <b>Megaplan ID</b> "
            "—É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ."
        )
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}", exc_info=True)
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.</b>\n\n"
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ª–æ–≥. –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º."
        )
    finally:
        # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ (—É—Å–ø–µ—Ö –∏–ª–∏ –æ—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –ë–î) –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()


@admin_router.message(Command("users_list"), HasPermissionFilter(Permission.MANAGE_USERS))
async def show_users_list_cmd(message: Message, session: AsyncSession):
    users = await crud.get_users(session, limit=100)  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    if not users:
        await message.answer("üë• –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    await message.answer(f"üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}. –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–ø–∏—Å–æ–∫...")

    for user in users:
        user_info = (
            f"üë§ <b>–ò–º—è:</b> {user.username}\n"
            f"üÜî <b>Telegram ID:</b> <code>{user.telegram_id}</code>\n"
            f"üè¢ <b>Megaplan ID:</b> <code>{user.megaplan_user_id}</code>\n"
            f"üîê <b>–ü—Ä–∞–≤–∞:</b> <code>{user.permissions}</code>"
        )
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –µ–≥–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer(
            text=user_info, reply_markup=get_user_management_kb(user.telegram_id)
        )
    await get_admin_menu_message(message)


@admin_router.callback_query(
    UserCallback.filter(F.action == "delete"), HasPermissionFilter(Permission.MANAGE_USERS)
)
async def delete_user_callback(
    query: CallbackQuery,
    callback_data: UserCallback,
    session: AsyncSession,
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å" –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_telegram_id_to_delete = callback_data.user_telegram_id

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        deleted = await crud.delete_user_by_telegram_id(
            session=session, telegram_id=user_telegram_id_to_delete
        )

        if deleted:
            # –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
            success_text = (
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_telegram_id_to_delete}</code> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω."
            )
            await query.message.edit_text(success_text)  # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω", show_alert=False)
        else:
            not_found_text = f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_telegram_id_to_delete}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω)."
            await query.message.edit_text(not_found_text)
            await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_telegram_id_to_delete}: {e}",
            exc_info=True,
        )
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.", show_alert=True)


# –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞–º–∏ –∑–∞—è–≤–æ–∫
@admin_router.message(
    Command("ticket_limits"),
    HasPermissionFilter([Permission.MANAGE_USERS, Permission.SET_TRIP_LIMITS]),
)
async def ticket_limits_menu_cmd(message: Message, session: AsyncSession, state: FSMContext):
    await state.clear()
    await get_ticket_limit_menu_message(message, session=session)


@admin_router.callback_query(
    F.data == "admin_limits_default", HasPermissionFilter(Permission.SET_TRIP_LIMITS)
)
async def set_default_limit_start(
    query: CallbackQuery, state: FSMContext, session: AsyncSession
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–õ–∏–º–∏—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é".
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è.
    """
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∏–∑ –ë–î
    app_settings = await crud.get_app_settings(session)
    current_limit = app_settings.default_daily_limit

    prompt_text = (
        f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.\n"
        f"<b>–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_limit}</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —á–∞—Ç."
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –æ—Ç–º–µ–Ω—ã
    await query.message.answer(text=prompt_text, reply_markup=get_cancel_kb())

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    await state.set_state(SetDefaultLimitFSM.waiting_for_new_limit)


@admin_router.message(
    SetDefaultLimitFSM.waiting_for_new_limit,
    F.text,
    HasPermissionFilter(Permission.SET_TRIP_LIMITS),
)
async def process_new_default_limit(message: Message, state: FSMContext, session: AsyncSession):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –ª–∏–º–∏—Ç–æ–º, –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –µ–≥–æ,
    —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î –∏ –≤—ã–≤–æ–¥–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞–º–∏.
    """
    # 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞
    try:
        new_limit = int(message.text.strip())
        if new_limit < 0:
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞:</b> –õ–∏–º–∏—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return
    except (ValueError, TypeError):
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> –í–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ."
        )
        return

    # 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        updated_settings = await crud.update_default_limit(session, new_limit)
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∏–∑–º–µ–Ω–∏–ª –ª–∏–º–∏—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ {new_limit}"
        )
        await message.answer(
            f"‚úÖ –õ–∏–º–∏—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ <b>{updated_settings.default_daily_limit}</b>."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –≤ –ë–î: {e}", exc_info=True)
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ª–∏–º–∏—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. {e}"
        )
        await state.clear()
        return

    # 3. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ FSM –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞–º–∏
    await state.clear()

    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ª–æ–≥–∏–∫—É ticket_limits_menu_cmd, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
    await get_ticket_limit_menu_message(message, session=session)


@admin_router.callback_query(
    F.data == "admin_limits_date", HasPermissionFilter(Permission.SET_TRIP_LIMITS)
)
async def set_date_limit_start(query: CallbackQuery, state: FSMContext):
    """
    –®–∞–≥ 1: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—É –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç.
    """
    await query.answer()
    await state.clear()

    instruction_text = (
        "üóì <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏–º–∏—Ç–∞ –Ω–∞ –¥–∞—Ç—É</b> üóì\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–î–î.–ú–ú.–ì–ì–ì–ì</code>.\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "‚Ä¢ –û–¥–Ω–∞ –¥–∞—Ç–∞: <code>25.12.2025</code>\n"
        "‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω: <code>01.01.2026-07.01.2026</code>"
    )
    await query.message.answer(instruction_text, reply_markup=get_cancel_kb())
    await state.set_state(SetDateLimitFSM.waiting_for_date_range)


@admin_router.message(
    SetDateLimitFSM.waiting_for_date_range,
    F.text,
    HasPermissionFilter(Permission.SET_TRIP_LIMITS),
)
async def process_date_range(message: Message, state: FSMContext):
    """
    –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞—Ç—É(—ã), —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ state.data –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ª–∏–º–∏—Ç.
    """
    date_text = message.text.strip()
    try:
        if "-" in date_text:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            start_str, end_str = date_text.split("-")
            start_date = datetime.strptime(start_str.strip(), "%d.%m.%Y").date()
            end_date = datetime.strptime(end_str.strip(), "%d.%m.%Y").date()
            if start_date > end_date:
                await message.answer(
                    "‚ùå <b>–û—à–∏–±–∫–∞:</b> –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –∫–æ–Ω–µ—á–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
                return
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –¥–∞—Ç—ã
            start_date = end_date = datetime.strptime(date_text, "%d.%m.%Y").date()

    except ValueError:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞!</b>\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç <code>–î–î.–ú–ú.–ì–ì–ì–ì</code> –∏–ª–∏ <code>–î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì</code>."
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—ã –≤ FSM
    await state.update_data(start_date=start_date, end_date=end_date)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>—á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞</b> –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –¥–∞—Ç."
    )
    await state.set_state(SetDateLimitFSM.waiting_for_limit_value)


@admin_router.message(
    SetDateLimitFSM.waiting_for_limit_value,
    F.text,
    HasPermissionFilter(Permission.SET_TRIP_LIMITS),
)
async def process_limit_for_date(message: Message, state: FSMContext, session: AsyncSession):
    """
    –®–∞–≥ 3: –ü–æ–ª—É—á–∞–µ—Ç –ª–∏–º–∏—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –¥–ª—è –¥–∞—Ç –∏–∑ state.data –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç.
    """
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ª–∏–º–∏—Ç–∞
    try:
        limit_value = int(message.text.strip())
        if limit_value < 0:
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞:</b> –õ–∏–º–∏—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return
    except (ValueError, TypeError):
        await message.answer("‚ùå <b>–û—à–∏–±–∫–∞:</b> –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
    fsm_data = await state.get_data()
    start_date = fsm_data.get("start_date")
    end_date = fsm_data.get("end_date")

    if not start_date or not end_date:
        logger.error(
            f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ FSM: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è user {message.from_user.id}"
        )
        await message.answer("‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        await get_ticket_limit_menu_message(message, session=session)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    try:
        await crud.set_daily_limit_override_range(
            session=session, start_date=start_date, end_date=end_date, limit=limit_value
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ª–∏–º–∏—Ç–∞ –Ω–∞ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç: {e}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await state.clear()
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    if start_date == end_date:
        date_info = f"–Ω–∞ –¥–∞—Ç—É <b>{start_date.strftime('%d.%m.%Y')}</b>"
    else:
        date_info = f"–¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç —Å <b>{start_date.strftime('%d.%m.%Y')}</b> –ø–æ <b>{end_date.strftime('%d.%m.%Y')}</b>"

    await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏–º–∏—Ç <b>{limit_value}</b> {date_info}.")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º FSM –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
    await state.clear()
    await get_ticket_limit_menu_message(message, session=session)


@admin_router.callback_query(
    F.data == "admin_limits_view", HasPermissionFilter(Permission.SET_TRIP_LIMITS)
)
async def view_date_limit_start(query: CallbackQuery, state: FSMContext):
    """–®–∞–≥ 1: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—É –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."""
    await query.answer()
    await state.clear()

    instruction_text = (
        "üîç <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–∏–º–∏—Ç–æ–≤</b> üîç\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç (–Ω–µ –±–æ–ª–µ–µ 31 –¥–Ω—è) –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–î–î.–ú–ú.–ì–ì–ì–ì</code>.\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "‚Ä¢ –û–¥–Ω–∞ –¥–∞—Ç–∞: <code>25.12.2025</code>\n"
        "‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω: <code>01.01.2026-15.01.2026</code>"
    )
    await query.message.answer(instruction_text, reply_markup=get_cancel_kb())
    await state.set_state(ViewDateLimitFSM.waiting_for_date_range_to_view)


@admin_router.message(
    ViewDateLimitFSM.waiting_for_date_range_to_view,
    F.text,
    HasPermissionFilter(Permission.SET_TRIP_LIMITS),
)
async def process_date_range_for_view(
    message: Message, state: FSMContext, session: AsyncSession
):
    """–®–∞–≥ 2: –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω, –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    date_text = message.text.strip()
    try:
        if "-" in date_text:
            start_str, end_str = date_text.split("-")
            start_date = datetime.strptime(start_str.strip(), "%d.%m.%Y").date()
            end_date = datetime.strptime(end_str.strip(), "%d.%m.%Y").date()
            if start_date > end_date:
                await message.answer(
                    "‚ùå <b>–û—à–∏–±–∫–∞:</b> –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –∫–æ–Ω–µ—á–Ω–æ–π."
                )
                return
            if (end_date - start_date).days > 30:
                await message.answer("‚ùå <b>–û—à–∏–±–∫–∞:</b> –î–∏–∞–ø–∞–∑–æ–Ω –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 31 –¥–µ–Ω—å.")
                return
        else:
            start_date = end_date = datetime.strptime(date_text, "%d.%m.%Y").date()
    except ValueError:
        await message.answer("‚ùå <b>–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞!</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>–î–î.–ú–ú.–ì–ì–ì–ì</code>.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    day_names_ru = ("–ø–Ω", "–≤—Ç", "—Å—Ä", "—á—Ç", "–ø—Ç", "—Å–±", "–≤—Å")
    results = []
    app_settings = await crud.get_app_settings(session)
    default_limit = app_settings.default_daily_limit

    current_date = start_date
    while current_date <= end_date:
        actual_limit = await crud.get_actual_limit_for_date(session, current_date)
        day_name = day_names_ru[current_date.weekday()]
        date_str = current_date.strftime("%d.%m.%Y")
        override_marker = " ‚ú®" if actual_limit != default_limit else ""
        results.append(f"{day_name}, {date_str}: <b>{actual_limit}</b>{override_marker}")
        current_date += timedelta(days=1)

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    results_text = "\n".join(results)
    final_message = f"üìä <b>–õ–∏–º–∏—Ç—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥:</b>\n\n{results_text}"
    await message.answer(final_message)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º FSM –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ª–∏–º–∏—Ç–æ–≤
    await state.clear()
    await get_ticket_limit_menu_message(message, session)
