from aiogram import Router, types
from aiogram.filters import Command
import logging
from app_bot.database.engine import DatabaseManager
from app_bot.database.crud import get_users
from app_bot.database.models import User  # –î–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤

admin_router = Router()
logger = logging.getLogger(__name__)


@admin_router.message(Command("admin"))
async def cmd_admin(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/users_list - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞\n"
        "/add_user - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞\n"
    )


@admin_router.message(Command("users_list"))
async def cmd_users_list(
    message: types.Message,
    db_manager: DatabaseManager,  # –ü–æ–ª—É—á–∞–µ–º db_manager –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /users_list.
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞, –∫–∞–∂–¥–æ–≥–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.
    """
    # –ü–æ–∫–∞ –Ω–µ –¥–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤, –∫–∞–∫ –∏ –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞–ª–∏—Å—å
    # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ–º–æ—á–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    try:
        async with db_manager.session() as session:  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
            users: list[User] = await get_users(session, limit=20)

        if not users:
            await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            await message.answer(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/users_list - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞\n"
                "/add_user - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞\n"
            )
            return

        await message.answer("<b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞:</b>\n")

        for user in users:
            username = f"@{user.username}" if user.username else "N/A"
            megaplan_id = (
                user.megaplan_user_id if user.megaplan_user_id is not None else "N/A"
            )
            telegram_id = user.telegram_id if user.telegram_id is not None else "N/A"

            user_info_text = (
                f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n"
                f"ID: <code>{user.telegram_id}</code>\n"
                f"Username: {username}\n"
                f"Megaplan ID: {megaplan_id}\n"
                f"Telegram ID: {telegram_id}\n"
                f"–ü—Ä–∞–≤–∞: {user.permissions}\n"
                f"–î–æ–±–∞–≤–ª–µ–Ω: {user.created_at.strftime('%d.%m.%Y')}"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            # –í –±—É–¥—É—â–µ–º —Å—é–¥–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å reply_markup —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await message.answer(user_info_text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}", exc_info=True)
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
