import logging

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message
from sqlalchemy.exc import IntegrityError
from sqlalchemy.ext.asyncio import AsyncSession

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ–ª–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
from app_bot.config.user_roles_config import (
    ADMIN_ROLE_PERMISSIONS,
    MANAGER_ROLE_PERMISSIONS,
    USER_ROLE_PERMISSIONS,
)
from app_bot.database import crud
from app_bot.database.models import Permission
from app_bot.filters.permission_filters import HasPermissionFilter
from app_bot.keyboards.admin_keyboards import (
    UserCallback,
    get_cancel_kb,
    get_limits_management_kb,
    get_user_management_kb,
)


admin_router = Router()
logger = logging.getLogger(__name__)


class CreateUserFSM(StatesGroup):
    """
    –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """

    waiting_for_user_data = State()


class EditUserFSM(StatesGroup):
    """
    –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """

    waiting_for_new_data = State()


ROLES_MAP = {
    "USER_ROLE_PERMISSIONS": USER_ROLE_PERMISSIONS,
    "MANAGER_ROLE_PERMISSIONS": MANAGER_ROLE_PERMISSIONS,
    "ADMIN_ROLE_PERMISSIONS": ADMIN_ROLE_PERMISSIONS,
}


async def get_admin_menu_message(event: Message | CallbackQuery) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω-–º–µ–Ω—é.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ª–∏–±–æ Message, –ª–∏–±–æ CallbackQuery.

    ‚Ä¢ –î–ª—è Message ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
    ‚Ä¢ –î–ª—è CallbackQuery ‚Äî —Å–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º ¬´–∫—Ä—É—Ç–∏–ª–∫—É¬ª –º–µ—Ç–æ–¥–æ–º
    `CallbackQuery.answer()` (0-200 —Å–∏–º–≤.[8]), –∑–∞—Ç–µ–º
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –ø—Ä–∏ –ø–æ–º–æ—â–∏ `event.message.answer(...)`.
    """
    instruction_text = (
        "üîß –†–ï–ñ–ò–ú –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê üîß\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
        "üë§ /create_user ‚Äì –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "üìã /users_list ‚Äì –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        "üìä /ticket_limits ‚Äì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞–º–∏ –∑–∞—è–≤–æ–∫\n\n"
        "üè† /start ‚Äì –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    )

    if isinstance(event, Message):
        await event.answer(text=instruction_text)
    elif isinstance(event, CallbackQuery):
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º progress-bar; —Ç–µ–∫—Å—Ç ‚â§200 —Å–∏–º–≤.[8]
        await event.answer()
        await event.message.answer(text=instruction_text)
    else:
        raise TypeError("–ê—Ä–≥—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Message –∏–ª–∏ CallbackQuery")


@admin_router.callback_query(F.data == "admin_cancel")
async def cancel_cmd(query: CallbackQuery, state: FSMContext):
    await state.clear()
    await get_admin_menu_message(query)


@admin_router.message(
    Command("admin"), HasPermissionFilter([Permission.MANAGE_USERS, Permission.SET_TRIP_LIMITS])
)
async def admin_cmd(message: Message):
    await get_admin_menu_message(message)


@admin_router.message(
    Command("ticket_limits"),
    HasPermissionFilter([Permission.MANAGE_USERS, Permission.SET_TRIP_LIMITS]),
)
async def ticket_limits_menu_cmd(message: Message, session: AsyncSession):
    app_settings = await crud.get_app_settings(session)
    kb = get_limits_management_kb(default_limit=app_settings.default_daily_limit)
    await message.answer(""" üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞–º–∏ –∑–∞—è–≤–æ–∫ üìã""", reply_markup=kb)


@admin_router.message(Command("create_user"), HasPermissionFilter(Permission.MANAGE_USERS))
async def start_user_creation_cmd(message: Message, state: FSMContext):
    """
    –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –û–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –≤–≤–æ–¥—É –¥–∞–Ω–Ω—ã—Ö.
    """

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    instruction_text = """
        üìù **–°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø** üìù

        –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –ö–∞–∂–¥—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:

        üÜî <b>Telegram ID</b>
        ‚îî‚îÄ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram

        üè¢ <b>Megaplan ID</b>
        ‚îî‚îÄ ID –≤ —Å–∏—Å—Ç–µ–º–µ Megaplan

        üë§ <b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>
        ‚îî‚îÄ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        üîê <b>–ì—Ä—É–ø–ø–∞ –ø—Ä–∞–≤</b>
        ‚îî‚îÄ –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ä–æ–ª–µ–π:
            ‚Ä¢ USER_ROLE_PERMISSIONS (—Å–æ–∑–¥–∞–Ω–∏–µ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫)
            ‚Ä¢ MANAGER_ROLE_PERMISSIONS (+ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞–º–∏ –∑–∞—è–≤–æ–∫)
            ‚Ä¢ ADMIN_ROLE_PERMISSIONS (+ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏)

        –ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞:
        123456789
        133546456
        –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤
        USER_ROLE_PERMISSIONS
        """
    await message.answer(text=instruction_text, reply_markup=get_cancel_kb())

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await state.set_state(CreateUserFSM.waiting_for_user_data)


@admin_router.message(
    CreateUserFSM.waiting_for_user_data, F.text, HasPermissionFilter(Permission.MANAGE_USERS)
)
async def process_and_save_user_data_cmd(
    message: Message, state: FSMContext, session: AsyncSession
):
    """
    –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Ö
    –∏ —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î. –ö–∞–∂–¥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–µ—Ä–Ω—É—Ç–∞ –≤ —Å–≤–æ–π –±–ª–æ–∫ try-except.
    """
    # --- 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤–≤–æ–¥–∞ ---
    try:
        lines = message.text.strip().split("\n")
        if len(lines) != 4:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫. –û–∂–∏–¥–∞–ª–æ—Å—å 4.")
        tg_id_str, mp_id_str, username, role_str = [line.strip() for line in lines]
    except (ValueError, IndexError):
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–≤–æ–¥–∞!</b>\n\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ —Ä–æ–≤–Ω–æ 4 —Å—Ç—Ä–æ–∫–∏, –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return

    # --- 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram ID ---
    try:
        telegram_id = int(tg_id_str)
    except ValueError:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π Telegram ID!</b>\n\n"
            f"–ó–Ω–∞—á–µ–Ω–∏–µ '<code>{tg_id_str}</code>' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º. "
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID."
        )
        return

    # --- 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ Megaplan ID ---
    try:
        megaplan_user_id = int(mp_id_str)
    except ValueError:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π Megaplan ID!</b>\n\n"
            f"–ó–Ω–∞—á–µ–Ω–∏–µ '<code>{mp_id_str}</code>' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º. "
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID."
        )
        return

    # --- 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    if not username:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</b>\n\n"
            "–ü–æ–ª–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è."
        )
        return

    # --- 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ ---
    try:
        permissions = ROLES_MAP[role_str]
    except KeyError:
        valid_roles_html = "\n".join([f"‚Ä¢ <code>{role}</code>" for role in ROLES_MAP.keys()])
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å!</b>\n\n"
            f"–£–∫–∞–∑–∞–Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ä–æ–ª—å '<code>{role_str}</code>'.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π:\n{valid_roles_html}"
        )
        return

    # --- 6. –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î ---
    try:
        new_user = await crud.create_user(
            session=session,
            telegram_id=telegram_id,
            username=username,
            megaplan_user_id=megaplan_user_id,
            initial_permissions=permissions,
        )

        success_text = f"""
            ‚úÖ <b>–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù</b> ‚úÖ

            –ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

            üÜî <b>Telegram ID:</b> <code>{new_user.telegram_id}</code>
            üè¢ <b>Megaplan ID:</b> <code>{new_user.megaplan_user_id}</code>
            üë§ <b>–ò–º—è:</b> {new_user.username}
            üîê <b>–†–æ–ª—å:</b> <code>{role_str}</code>
        """

        await message.answer(success_text)
        await get_admin_menu_message(message)

    except IntegrityError:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!</b>\n\n"
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º <b>Telegram ID</b> –∏–ª–∏ <b>Megaplan ID</b> "
            "—É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ."
        )
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}", exc_info=True)
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.</b>\n\n"
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ª–æ–≥. –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º."
        )
    finally:
        # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ (—É—Å–ø–µ—Ö –∏–ª–∏ –æ—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –ë–î) –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()


@admin_router.message(Command("users_list"), HasPermissionFilter(Permission.MANAGE_USERS))
async def show_users_list_cmd(message: Message, session: AsyncSession):
    users = await crud.get_users(session, limit=100)  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    if not users:
        await message.answer("üë• –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    await message.answer(f"üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}. –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–ø–∏—Å–æ–∫...")

    for user in users:
        user_info = (
            f"üë§ <b>–ò–º—è:</b> {user.username}\n"
            f"üÜî <b>Telegram ID:</b> <code>{user.telegram_id}</code>\n"
            f"üè¢ <b>Megaplan ID:</b> <code>{user.megaplan_user_id}</code>\n"
            f"üîê <b>–ü—Ä–∞–≤–∞:</b> <code>{user.permissions}</code>"
        )
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –µ–≥–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer(
            text=user_info, reply_markup=get_user_management_kb(user.telegram_id)
        )
    await get_admin_menu_message(message)


@admin_router.callback_query(
    UserCallback.filter(F.action == "delete"), HasPermissionFilter(Permission.MANAGE_USERS)
)
async def delete_user_callback(
    query: CallbackQuery,
    callback_data: UserCallback,
    session: AsyncSession,
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å" –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_telegram_id_to_delete = callback_data.user_telegram_id

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        deleted = await crud.delete_user_by_telegram_id(
            session=session, telegram_id=user_telegram_id_to_delete
        )

        if deleted:
            # –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
            success_text = (
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_telegram_id_to_delete}</code> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω."
            )
            await query.message.edit_text(success_text)  # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω", show_alert=False)
        else:
            not_found_text = f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_telegram_id_to_delete}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω)."
            await query.message.edit_text(not_found_text)
            await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_telegram_id_to_delete}: {e}",
            exc_info=True,
        )
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.", show_alert=True)
