from datetime import datetime, timedelta, timezone

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message
from sqlalchemy.ext.asyncio import AsyncSession

from app_bot.config.config import get_env_settings
from app_bot.crm_service.crm_client import CRMClient
from app_bot.nspd_service.nspd_client import NspdClient
from app_bot.utils.ui_utils import (
    get_main_menu_message,
    prepare_deal_view_data,
)


view_tickets_router = Router()

settings = get_env_settings()
APP_TIMEZONE = timezone(timedelta(hours=settings.APP_TIMEZONE_OFFSET))


class ViewTicketsByDateFSM(StatesGroup):
    """
    –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É.
    """

    waiting_for_date = State()


@view_tickets_router.callback_query(F.data == "view_tickets_today")
async def view_today_deals_handler(
    query: CallbackQuery,
    crm_client: CRMClient,
    session: AsyncSession,
    nspd_client: NspdClient,
):
    await query.message.answer("–ó–∞–≥—Ä—É–∂–∞—é –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è...")
    await query.answer()

    today = datetime.now(APP_TIMEZONE).date()
    result = await prepare_deal_view_data(
        crm_client=crm_client,
        start_date=today,
        end_date=today,
        nspd_client=nspd_client,
        session=session,
        user_telegram_id=query.from_user.id,
    )

    for item in result["messages_to_send"]:
        await query.message.answer(
            text=item["text"],
            reply_markup=item["reply_markup"],
            disable_web_page_preview=True,
        )

    map_url = result.get("map_url")
    if map_url:
        await query.message.answer(
            "üó∫Ô∏è <b>–ö–∞—Ä—Ç–∞ –≤—ã–µ–∑–¥–æ–≤ –≥–æ—Ç–æ–≤–∞!</b>\n\n"
            "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –µ–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:\n"
            f"<code>{map_url}</code>\n\n"
            "<i>–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 5 –º–∏–Ω—É—Ç.</i>",
            # –Ø–≤–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–≤—å—é, —á—Ç–æ–±—ã —Å—Å—ã–ª–∫–∞ –Ω–µ –≤—ã–≥–ª—è–¥–µ–ª–∞ –∫–∞–∫ "—Å–ª–æ–º–∞–Ω–Ω–∞—è"
            disable_web_page_preview=True,
        )

    await get_main_menu_message(query.message, session, crm_client)


@view_tickets_router.callback_query(F.data == "view_tickets_tomorrow")
async def view_tomorrow_deals_handler(
    query: CallbackQuery,
    crm_client: CRMClient,
    session: AsyncSession,
    nspd_client: NspdClient,
):
    await query.message.answer("–ó–∞–≥—Ä—É–∂–∞—é –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞...")
    await query.answer()

    tomorrow = datetime.now(APP_TIMEZONE).date() + timedelta(days=1)
    result = await prepare_deal_view_data(
        crm_client=crm_client,
        start_date=tomorrow,
        end_date=tomorrow,
        nspd_client=nspd_client,
        session=session,
        user_telegram_id=query.from_user.id,
    )

    for item in result["messages_to_send"]:
        await query.message.answer(
            text=item["text"],
            reply_markup=item["reply_markup"],
            disable_web_page_preview=True,
        )

    map_url = result.get("map_url")
    if map_url:
        await query.message.answer(
            "üó∫Ô∏è <b>–ö–∞—Ä—Ç–∞ –≤—ã–µ–∑–¥–æ–≤ –≥–æ—Ç–æ–≤–∞!</b>\n\n"
            "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –µ–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:\n"
            f"<code>{map_url}</code>\n\n"
            "<i>–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 5 –º–∏–Ω—É—Ç.</i>",
            # –Ø–≤–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–≤—å—é, —á—Ç–æ–±—ã —Å—Å—ã–ª–∫–∞ –Ω–µ –≤—ã–≥–ª—è–¥–µ–ª–∞ –∫–∞–∫ "—Å–ª–æ–º–∞–Ω–Ω–∞—è"
            disable_web_page_preview=True,
        )

    await get_main_menu_message(query.message, session, crm_client)


@view_tickets_router.callback_query(F.data == "view_tickets_other_date")
async def view_other_date_deals_start(query: CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞—Ç—É.
    """
    await query.answer()
    await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì</b> –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫.")
    await state.set_state(ViewTicketsByDateFSM.waiting_for_date)


@view_tickets_router.message(ViewTicketsByDateFSM.waiting_for_date, F.text)
async def process_date_for_view(
    message: Message,
    state: FSMContext,
    crm_client: CRMClient,
    session: AsyncSession,
    nspd_client: NspdClient,
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∞—Ç—É, –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞—è–≤–∫–∏.
    """
    await state.clear()
    try:
        target_date = datetime.strptime(message.text.strip(), "%d.%m.%Y").date()
    except ValueError:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì</b>."
        )
        await get_main_menu_message(message, session, crm_client)
        return

    await message.answer(f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∑–∞—è–≤–∫–∏ –Ω–∞ <b>{target_date.strftime('%d.%m.%Y')}</b>...")

    result = await prepare_deal_view_data(
        crm_client=crm_client,
        start_date=target_date,
        end_date=target_date,
        nspd_client=nspd_client,
        session=session,
        user_telegram_id=message.from_user.id,
    )

    for item in result["messages_to_send"]:
        await message.answer(
            text=item["text"],
            reply_markup=item["reply_markup"],
            disable_web_page_preview=True,
        )

    map_url = result.get("map_url")
    if map_url:
        await message.answer(
            "üó∫Ô∏è <b>–ö–∞—Ä—Ç–∞ –≤—ã–µ–∑–¥–æ–≤ –≥–æ—Ç–æ–≤–∞!</b>\n\n"
            "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –µ–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:\n"
            f"<code>{map_url}</code>\n\n"
            "<i>–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 5 –º–∏–Ω—É—Ç.</i>",
            # –Ø–≤–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–≤—å—é, —á—Ç–æ–±—ã —Å—Å—ã–ª–∫–∞ –Ω–µ –≤—ã–≥–ª—è–¥–µ–ª–∞ –∫–∞–∫ "—Å–ª–æ–º–∞–Ω–Ω–∞—è"
            disable_web_page_preview=True,
        )

    await get_main_menu_message(message, session, crm_client)
