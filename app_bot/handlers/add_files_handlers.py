import logging
from io import BytesIO

from aiogram import Bot, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message
from sqlalchemy.ext.asyncio import AsyncSession

from app_bot.crm_service.crm_client import CRMClient
from app_bot.database.models import Permission
from app_bot.filters.permission_filters import HasPermissionFilter
from app_bot.keyboards.add_files_keyboards import get_add_files_kb
from app_bot.keyboards.view_ticket_keyboards import DealActionCallback
from app_bot.utils.ui_utils import get_main_menu_message


add_files_router = Router()
logger = logging.getLogger(__name__)

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö (25 –ú–ë)
MAX_FILE_SIZE = 25 * 1024 * 1024


class AddFilesFSM(StatesGroup):
    """FSM –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∫ —Å–¥–µ–ª–∫–µ."""

    waiting_for_files = State()


# 1. –•–µ–Ω–¥–ª–µ—Ä, –∑–∞–ø—É—Å–∫–∞—é—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
@add_files_router.callback_query(
    DealActionCallback.filter(F.action == "add_files"),
    HasPermissionFilter(Permission.ADD_FILES_FROM_VISIT),
)
async def start_add_files(
    query: CallbackQuery, callback_data: DealActionCallback, state: FSMContext
):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∫ —Å–¥–µ–ª–∫–µ."""
    deal_id = callback_data.deal_id
    await state.set_state(AddFilesFSM.waiting_for_files)
    await state.update_data(deal_id=deal_id, uploaded_file_ids=[])

    # –ë–µ—Ä–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_lines = query.message.html_text.split("\n")
    deal_context = "\n".join(message_lines[:2])  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: —Å—Å—ã–ª–∫–∞+–¥–∞—Ç–∞, –≤—Ç–æ—Ä–∞—è: –Ω–∞–∑–≤–∞–Ω–∏–µ

    await query.answer()
    await query.message.answer(
        f"üìÅ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∫ —Å–¥–µ–ª–∫–µ:**\n{deal_context}\n\n"
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã\n"
        "üìé –ú–æ–∂–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –ø–æ –æ–¥–Ω–æ–º—É –∏–ª–∏ —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ (–∞–ª—å–±–æ–º–æ–º)\n\n"
        "‚úÖ –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
        reply_markup=get_add_files_kb(),
        disable_web_page_preview=True,  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–¥–µ–ª–∫—É
    )


# 2. –•–µ–Ω–¥–ª–µ—Ä, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π —Ñ–∞–π–ª—ã
@add_files_router.message(
    AddFilesFSM.waiting_for_files,
    F.content_type.in_({"photo", "document", "video"}),
    HasPermissionFilter(Permission.ADD_FILES_FROM_VISIT),
)
async def process_file(message: Message, state: FSMContext, bot: Bot, crm_client: CRMClient):
    """–õ–æ–≤–∏—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª (—Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –≤–∏–¥–µ–æ)."""
    file_id = None
    file_name = "–∏–º—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
    file_size = 0

    if message.photo:
        file_id = message.photo[-1].file_id
        file_size = message.photo[-1].file_size
        file_name = f"{file_id}.jpg"
    elif message.document:
        file_id = message.document.file_id
        file_size = message.document.file_size
        file_name = message.document.file_name
    elif message.video:
        file_id = message.video.file_id
        file_size = message.video.file_size
        file_name = message.video.file_name or f"{file_id}.mp4"

    if not file_id:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ.")
        return

    if file_size > MAX_FILE_SIZE:
        error_msg = (
            f"‚ùå <b>–§–∞–π–ª ¬´{file_name}¬ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π</b> ({file_size / 1024 / 1024:.2f} –ú–ë).\n"
            "–û–Ω –Ω–µ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω. –õ–∏–º–∏—Ç Telegram Bot API ‚Äî 25 –ú–ë. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ú–µ–≥–∞–ø–ª–∞–Ω–∞."
        )
        await message.answer(error_msg)
        return

    status_msg = await message.answer(f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é ¬´{file_name}¬ª...")
    try:
        file_io = BytesIO()
        await bot.download(file_id, destination=file_io)
        file_bytes = file_io.getvalue()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {file_id} —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram: {e}")
        await status_msg.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å ¬´{file_name}¬ª —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram.")
        return

    try:
        uploaded_file_info = await crm_client.upload_file_from_bytes(
            file_content=file_bytes, file_name=file_name
        )
        if not uploaded_file_info or "id" not in uploaded_file_info:
            raise Exception("CRM –Ω–µ –≤–µ—Ä–Ω—É–ª–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ.")

        crm_file_id = uploaded_file_info["id"]

        data = await state.get_data()
        current_ids = data.get("uploaded_file_ids", [])
        current_ids.append(crm_file_id)
        await state.update_data(uploaded_file_ids=current_ids)

        await status_msg.edit_text(
            f"‚úÖ –§–∞–π–ª ¬´{file_name}¬ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.", reply_markup=get_add_files_kb()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ '{file_name}' –≤ CRM: {e}", exc_info=True)
        await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ¬´{file_name}¬ª –≤ CRM.")


# 3. –•–µ–Ω–¥–ª–µ—Ä, –∑–∞–≤–µ—Ä—à–∞—é—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
@add_files_router.callback_query(
    F.data == "add_files_complete",
    AddFilesFSM.waiting_for_files,
    HasPermissionFilter(Permission.ADD_FILES_FROM_VISIT),
)
async def complete_add_files(
    query: CallbackQuery, state: FSMContext, crm_client: CRMClient, session: AsyncSession
):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ—Ç –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∫ —Å–¥–µ–ª–∫–µ."""
    await query.answer()
    data = await state.get_data()
    deal_id = data.get("deal_id")
    uploaded_file_ids = data.get("uploaded_file_ids", [])

    if not uploaded_file_ids:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞
        await query.message.edit_text("–í—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await state.clear()
        return

    status_msg = await query.message.edit_text(
        f"‚è≥ –ü—Ä–∏–∫—Ä–µ–ø–ª—è—é {len(uploaded_file_ids)} —Ñ–∞–π–ª–æ–≤ –∫ —Å–¥–µ–ª–∫–µ ID: {deal_id}..."
    )

    try:
        success = await crm_client.attach_files_to_deal_visit_docs(
            deal_id=deal_id, file_ids=uploaded_file_ids
        )
        if success:
            await status_msg.edit_text(
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ! {len(uploaded_file_ids)} —Ñ–∞–π–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ —Å–¥–µ–ª–∫–µ."
            )
            await get_main_menu_message(
                message=query.message, session=session, crm_client=crm_client
            )
        else:
            await status_msg.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –∫ —Å–¥–µ–ª–∫–µ.")
    except Exception as e:
        logger.error(
            f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –∫ —Å–¥–µ–ª–∫–µ {deal_id}: {e}", exc_info=True
        )
        await status_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
        await get_main_menu_message(
            message=query.message, session=session, crm_client=crm_client
        )
    finally:
        await state.clear()


# 4. –•–µ–Ω–¥–ª–µ—Ä –æ—Ç–º–µ–Ω—ã
@add_files_router.callback_query(F.data == "add_files_cancel", AddFilesFSM.waiting_for_files)
async def cancel_add_files(
    query: CallbackQuery, state: FSMContext, session: AsyncSession, crm_client: CRMClient
):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await state.clear()
    await query.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç
    await query.message.delete()
    await get_main_menu_message(message=query.message, session=session, crm_client=crm_client)
