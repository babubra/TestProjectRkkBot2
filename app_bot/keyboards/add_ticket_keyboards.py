import datetime
from collections import Counter

from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder


class AddTicketDateCallback(CallbackData, prefix="add_ticket_date"):
    """
    –§–∞–±—Ä–∏–∫–∞ Callback-–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏.
    - action: 'select_date' - –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã.
    - date_iso: –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO (–ì–ì–ì–ì-–ú–ú-–î–î).
    """

    action: str
    date_iso: str


class AddTicketTimeCallback(CallbackData, prefix="add_ticket_time"):
    """
    –§–∞–±—Ä–∏–∫–∞ Callback-–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏.
    - action: 'select_time'
    - time_iso: –í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO (–ß–ß:–ú–ú).
    """

    action: str
    time_str: str  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É, —Ç.–∫. datetime.time –Ω–µ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é


def get_add_ticket_date_kb(
    daily_stats: dict[datetime.date, tuple[int, int]],
) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –≤—ã–µ–∑–¥–∞.

    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–ë–µ–∑ –≤—ã–µ–∑–¥–∞", 5 –±–ª–∏–∂–∞–π—à–∏—Ö –¥–Ω–µ–π, –∏—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å (–ø—Ä–∏–Ω—è—Ç–æ/–ª–∏–º–∏—Ç)
    –∏ –ø–æ–º–µ—á–∞–µ—Ç –¥–Ω–∏ —Å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–º –ª–∏–º–∏—Ç–æ–º.

    Args:
        daily_stats: –°–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á - –¥–∞—Ç–∞, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ - –∫–æ—Ä—Ç–µ–∂ (–ø—Ä–∏–Ω—è—Ç–æ, –ª–∏–º–∏—Ç).
        –ü—Ä–∏–º–µ—Ä: {datetime.date(2024, 7, 8): (5, 10)}

    Returns:
        –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã.
    """

    # TODO –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ç–∞–∫–∂–µ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    #  –Ω–∞–¥–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤—è–æ–∫ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è. —Ç–æ –µ—Å—Ç—å –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞—Ç—å –≤
    # —Ö–µ–Ω–¥–ª–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫ –∏ –∑–∞–ø–æ–ª–Ω—è—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏.
    # —Ç–∞–∫–∂–µ –Ω–∞–¥–æ –±—É–¥–µ—Ç –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä - –º–∞–∫—Å–∏–º–∞–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –Ω–∞ –æ–¥–Ω–æ –≤—Ä–µ–º—è

    builder = InlineKeyboardBuilder()
    today = datetime.date.today()
    day_names_ru = ("–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å")

    builder.button(text="üè† –ë–µ–∑ –≤—ã–µ–∑–¥–∞", callback_data="add_ticket_no_visit")

    # --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ —Å –¥–∞—Ç–∞–º–∏ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
    for i in range(5):  # 5 –¥–Ω–µ–π, –≤–∫–ª—é—á–∞—è —Å–µ–≥–æ–¥–Ω—è
        current_date = today + datetime.timedelta(days=i)
        stats = daily_stats.get(current_date, (0, 0))  # (–ø—Ä–∏–Ω—è—Ç–æ, –ª–∏–º–∏—Ç)
        count, limit = stats

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ –¥–µ–Ω—å
        is_full = count >= limit
        limit_marker = " üî¥" if is_full else ""

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏
        if i == 0:
            button_text = f"–°–µ–≥–æ–¥–Ω—è ({count}/{limit}){limit_marker}"
        else:
            day_name = day_names_ru[current_date.weekday()]
            date_str = current_date.strftime("%d.%m")
            button_text = f"{day_name}, {date_str} ({count}/{limit}){limit_marker}"

        builder.button(
            text=button_text,
            callback_data=AddTicketDateCallback(
                action="select_date", date_iso=current_date.isoformat()
            ).pack(),
        )

    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="add_ticket_cancel")

    # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –ø–æ –æ–¥–Ω–æ–π –≤ —Å—Ç—Ä–æ–∫–µ
    builder.adjust(1)

    return builder.as_markup()


def get_add_ticket_time_kb(
    occupied_slots: list[str], brigades_count: int
) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–µ–∑–¥–∞,
    —É—á–∏—Ç—ã–≤–∞—è –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã.
    """
    builder = InlineKeyboardBuilder()

    # –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –∫–∞–∂–¥—ã–π —Å–ª–æ—Ç –∑–∞–Ω—è—Ç
    # –ù–∞–ø—Ä–∏–º–µ—Ä: {'09:00': 1, '12:00': 2}
    occupation_counter = Counter(occupied_slots)

    for hour in range(8, 18):
        time_for_button = f"{hour:02d}:00"
        time_for_callback = f"{hour:02d}-00"

        # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø ---
        current_occupation = occupation_counter.get(time_for_button, 0)

        button_text = f"{time_for_button}"
        if current_occupation > 0:
            # –ï—Å–ª–∏ —Å–ª–æ—Ç –∑–∞–Ω—è—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            button_text += f" ({current_occupation}/{brigades_count})"
            if current_occupation >= brigades_count:
                # –ï—Å–ª–∏ –≤—Å–µ –±—Ä–∏–≥–∞–¥—ã –∑–∞–Ω—è—Ç—ã, –¥–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä
                button_text += " üî¥"
        # --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò ---

        builder.button(
            text=button_text,
            callback_data=AddTicketTimeCallback(
                action="select_time", time_str=time_for_callback
            ).pack(),
        )

    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="add_ticket_cancel")

    time_buttons_count = 10
    adjust_pattern = [2] * (time_buttons_count // 2)
    adjust_pattern.append(1)

    builder.adjust(*adjust_pattern)

    return builder.as_markup()
