import datetime

from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder


class UserCallback(CallbackData, prefix="user_manage"):
    """
    –§–∞–±—Ä–∏–∫–∞ Callback-–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
    - prefix: 'user_manage' - –æ–±—â–∏–π –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –≤—Å–µ—Ö –∫–æ–ª–±—ç–∫–æ–≤ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞.
    - action: 'edit' –∏–ª–∏ 'delete' - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.
    - user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram, —Å –∫–æ—Ç–æ—Ä—ã–º —Å–æ–≤–µ—Ä—à–∞–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏–µ.
    """

    action: str
    user_telegram_id: int


class DateLimitCallback(CallbackData, prefix="limit_date"):
    """
    –§–∞–±—Ä–∏–∫–∞ Callback-–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –ª–∏–º–∏—Ç–∞–º–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É.
    - prefix: 'limit_date' - –æ–±—â–∏–π –ø—Ä–µ—Ñ–∏–∫—Å.
    - action: 'edit_limit' - –¥–µ–π—Å—Ç–≤–∏–µ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –≤ –±—É–¥—É—â–µ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, 'view_limit').
    - date_iso: –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO (–ì–ì–ì–ì-–ú–ú-–î–î) –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞.
    """

    action: str
    date_iso: str


def get_cancel_kb() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ '–û—Ç–º–µ–Ω–∞'
    """
    builder = InlineKeyboardBuilder()

    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel")

    return builder.as_markup()


def get_user_management_kb(user_telegram_id: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ '–£–¥–∞–ª–∏—Ç—å'
    –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        user_telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–∑–¥–∞–µ—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞.

    Returns:
        –û–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    builder = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∞ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
    # builder.button(
    #     text="‚úçÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
    #     callback_data=UserCallback(action="edit", user_telegram_id=user_telegram_id).pack(),
    # )

    # –ö–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å"
    builder.button(
        text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
        callback_data=UserCallback(action="delete", user_telegram_id=user_telegram_id).pack(),
    )

    # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Ä—è–¥
    # builder.adjust(2)

    return builder.as_markup()


def get_limits_management_kb(default_limit: int) -> InlineKeyboardMarkup:
    """
    –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞–º–∏ –∑–∞—è–≤–æ–∫.
    –°–æ–¥–µ—Ä–∂–∏—Ç –∫–Ω–æ–ø–∫–∏ –õ–∏–º–∏—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –õ–∏–º–∏—Ç—ã –Ω–∞ –¥–∞—Ç—É, –û—Ç–º–µ–Ω–∞.
    """

    builder = InlineKeyboardBuilder()
    builder.button(
        text=f"üìä –ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ({default_limit})",
        callback_data="admin_limits_default",
    )
    builder.button(
        text="üìÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–∏–º–∏—Ç—ã –Ω–∞ –¥–∞—Ç—É",
        callback_data="admin_limits_date",
    )
    builder.button(
        text="üîç –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–∏–º–∏—Ç—ã",
        callback_data="admin_limits_view",
    )
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel")
    builder.adjust(1)
    return builder.as_markup()


def get_view_limits_for_date_kb(
    daily_limits: dict[datetime.date, int], default_limit: int
) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏–º–∏—Ç–∞.
    –í–∫–ª—é—á–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ —Å–ª–µ–¥—É—é—â–∏–µ 6 –¥–Ω–µ–π, –æ—Ç–æ–±—Ä–∞–∂–∞—è –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ —Ç–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç.
    –ü–æ–º–µ—á–∞–µ—Ç –∏–∫–æ–Ω–∫–æ–π ‚ú® –ª–∏–º–∏—Ç—ã, –æ—Ç–ª–∏—á–Ω—ã–µ –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ.

    Args:
        daily_limits (dict[datetime.date, int]): –°–ª–æ–≤–∞—Ä—å —Å –¥–∞—Ç–∞–º–∏ –∏ –∏—Ö –ª–∏–º–∏—Ç–∞–º–∏.
        default_limit (int): –õ–∏–º–∏—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.

    Returns:
        –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–∞—Ç.
    """
    builder = InlineKeyboardBuilder()
    today = datetime.date.today()
    day_names_ru = ("–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å")

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å –¥–∞—Ç–∞–º–∏ ---

    # –ö–Ω–æ–ø–∫–∞ "–°–µ–≥–æ–¥–Ω—è"
    today_limit = daily_limits.get(today, "?")
    today_day_name = day_names_ru[today.weekday()]
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –º–∞—Ä–∫–µ—Ä –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
    today_marker = (
        " ‚ú®" if isinstance(today_limit, int) and today_limit != default_limit else ""
    )
    builder.button(
        text=f"–°–µ–≥–æ–¥–Ω—è ({today_day_name}, {today_limit}){today_marker}",
        callback_data=DateLimitCallback(action="edit_limit", date_iso=today.isoformat()).pack(),
    )

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 6 –¥–Ω–µ–π
    for i in range(1, 7):
        current_date = today + datetime.timedelta(days=i)
        limit = daily_limits.get(current_date, "?")
        day_name = day_names_ru[current_date.weekday()]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –º–∞—Ä–∫–µ—Ä –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –≤ —Ü–∏–∫–ª–µ
        override_marker = " ‚ú®" if isinstance(limit, int) and limit != default_limit else ""

        button_text = (
            f"{day_name}, {current_date.strftime('%d.%m.%y')} ({limit}){override_marker}"
        )

        builder.button(
            text=button_text,
            callback_data=DateLimitCallback(
                action="edit_limit", date_iso=current_date.isoformat()
            ).pack(),
        )

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π ---

    builder.button(text="‚å®Ô∏è –í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é", callback_data="admin_limits_manual_input")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel")

    builder.adjust(2, 2, 2, 1, 1, 1)

    return builder.as_markup()
