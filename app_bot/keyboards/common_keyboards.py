from datetime import date

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app_bot.keyboards.view_ticket_keyboards import ViewDateCallback


def get_main_menu_kb(
    tickets_today_count: int,
    limit_today: int,
    tickets_tomorrow_count: int,
    limit_tomorrow: int,
    next_days: list[tuple[date, int, int]],
    today_date: date,
    tomorrow_date: date,
) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 5 –¥–Ω–µ–π.

    Args:
        tickets_today_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.
        limit_today: –û–±—â–∏–π –ª–∏–º–∏—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.
        tickets_tomorrow_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.
        limit_tomorrow: –û–±—â–∏–π –ª–∏–º–∏—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.
        next_days: –°–ø–∏—Å–æ–∫ –∏–∑ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤–∏–¥–∞ (–¥–∞—Ç–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –ª–∏–º–∏—Ç) –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –¥–Ω–µ–π.

    Returns:
        –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
    """
    builder = InlineKeyboardBuilder()

    today_str = f"–ü—Ä–∏–Ω—è—Ç–æ {tickets_today_count} –∏–∑ {limit_today}"
    tomorrow_str = f"–ü—Ä–∏–Ω—è—Ç–æ {tickets_tomorrow_count} –∏–∑ {limit_tomorrow}"

    # –í–µ—Ä—Ö–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ –æ–¥–Ω–æ–π –≤ —Ä—è–¥
    add_btn = InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="add_ticket")
    today_btn = InlineKeyboardButton(
        text=f"üóìÔ∏è –ó–∞—è–≤–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. ({today_str})",
        callback_data=ViewDateCallback(date=today_date.isoformat()).pack(),
    )
    tomorrow_btn = InlineKeyboardButton(
        text=f"üóìÔ∏è –ó–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞. ({tomorrow_str})",
        callback_data=ViewDateCallback(date=tomorrow_date.isoformat()).pack(),
    )

    builder.row(add_btn)
    builder.row(today_btn)
    builder.row(tomorrow_btn)

    # –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ 5 –¥–Ω–µ–π: –ø–æ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥, —Ñ–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç–∞ "–î–î.–ú–ú –≤—Ç 3/5" (–¥–∞—Ç–∞, –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, —Å—á—ë—Ç—á–∏–∫/–ª–∏–º–∏—Ç)
    date_buttons: list[InlineKeyboardButton] = []
    weekdays = ["–ø–Ω", "–≤—Ç", "—Å—Ä", "—á—Ç", "–ø—Ç", "—Å–±", "–≤—Å"]
    for dt, cnt, lim in next_days:
        abbr = weekdays[dt.weekday()]
        text = f"üóìÔ∏è {abbr} {dt.strftime('%d.%m')} {cnt}/{lim}"
        cb = ViewDateCallback(date=dt.isoformat()).pack()
        date_buttons.append(InlineKeyboardButton(text=text, callback_data=cb))

    for i in range(0, len(date_buttons), 2):
        if i + 1 < len(date_buttons):
            builder.row(date_buttons[i], date_buttons[i + 1])
        else:
            builder.row(date_buttons[i])

    # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–π –¥–∞—Ç—ã –æ—Ç–¥–µ–ª—å–Ω–æ
    other_date_btn = InlineKeyboardButton(
        text="üìÖ –ó–∞—è–≤–∫–∏ –Ω–∞ –¥—Ä—É–≥—É—é –¥–∞—Ç—É", callback_data="view_tickets_other_date"
    )
    builder.row(other_date_btn)

    return builder.as_markup()
